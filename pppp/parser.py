#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#

# Autogenerated file. Do not edit!

from pppp import parserbase
from pppp import tokenizer

from pppp.parserbase import astnode


SPECIAL_NAMES = {"'>>='", "'True'", "'is'", "'or'", "'=='", "';'", "'<='", "'raise'", "'%'", "'^='", "'lambda'", "'...'", "'try'", "'+'", "'~'", "'return'", "'assert'", "'^'", "'break'", "'False'", "']'", "'**='", "'import'", "'yield'", "','", "'('", "'.'", "'>='", "'//='", "'*'", "'/='", "'@'", "'-='", "'|'", "'//'", "'->'", "'def'", "'*='", "'%='", "'>'", "'**'", "'not'", "':'", "'None'", "'<>'", "'in'", "'as'", "'class'", "'|='", "'elif'", "'and'", "'{'", "'+='", "'continue'", "'nonlocal'", "'<<'", "'&'", "'while'", "'except'", "'!='", "'else'", "'with'", "'='", "'/'", "'-'", "'['", "'&='", "')'", "'global'", "'for'", "'from'", "'if'", "'finally'", "'pass'", "'del'", "'<<='", "'}'", "'>>'", "'<'"}

FIRST={'and_expr': frozenset({"'('",
                        "'+'",
                        "'-'",
                        "'...'",
                        "'False'",
                        "'None'",
                        "'True'",
                        "'['",
                        "'{'",
                        "'~'",
                        'NAME',
                        'NUMBER',
                        'STRING'}),
 'and_test': frozenset({"'('",
                        "'+'",
                        "'-'",
                        "'...'",
                        "'False'",
                        "'None'",
                        "'True'",
                        "'['",
                        "'not'",
                        "'{'",
                        "'~'",
                        'NAME',
                        'NUMBER',
                        'STRING'}),
 'arglist': frozenset({"'('",
                       "'*'",
                       "'**'",
                       "'+'",
                       "'-'",
                       "'...'",
                       "'False'",
                       "'None'",
                       "'True'",
                       "'['",
                       "'lambda'",
                       "'not'",
                       "'{'",
                       "'~'",
                       'NAME',
                       'NUMBER',
                       'STRING'}),
 'argument': frozenset({"'('",
                        "'+'",
                        "'-'",
                        "'...'",
                        "'False'",
                        "'None'",
                        "'True'",
                        "'['",
                        "'lambda'",
                        "'not'",
                        "'{'",
                        "'~'",
                        'NAME',
                        'NUMBER',
                        'STRING'}),
 'arith_expr': frozenset({"'('",
                          "'+'",
                          "'-'",
                          "'...'",
                          "'False'",
                          "'None'",
                          "'True'",
                          "'['",
                          "'{'",
                          "'~'",
                          'NAME',
                          'NUMBER',
                          'STRING'}),
 'assert_stmt': frozenset({"'assert'"}),
 'atom': frozenset({"'('",
                    "'...'",
                    "'False'",
                    "'None'",
                    "'True'",
                    "'['",
                    "'{'",
                    'NAME',
                    'NUMBER',
                    'STRING'}),
 'augassign': frozenset({"'%='",
                         "'&='",
                         "'**='",
                         "'*='",
                         "'+='",
                         "'-='",
                         "'//='",
                         "'/='",
                         "'<<='",
                         "'>>='",
                         "'^='",
                         "'|='"}),
 'break_stmt': frozenset({"'break'"}),
 'classdef': frozenset({"'class'"}),
 'comp_for': frozenset({"'for'"}),
 'comp_if': frozenset({"'if'"}),
 'comp_iter': frozenset({"'for'", "'if'"}),
 'comp_op': frozenset({"'!='",
                       "'<'",
                       "'<='",
                       "'<>'",
                       "'=='",
                       "'>'",
                       "'>='",
                       "'in'",
                       "'is'",
                       "'not'"}),
 'comparison': frozenset({"'('",
                          "'+'",
                          "'-'",
                          "'...'",
                          "'False'",
                          "'None'",
                          "'True'",
                          "'['",
                          "'{'",
                          "'~'",
                          'NAME',
                          'NUMBER',
                          'STRING'}),
 'compound_stmt': frozenset({"'@'",
                             "'class'",
                             "'def'",
                             "'for'",
                             "'if'",
                             "'try'",
                             "'while'",
                             "'with'"}),
 'continue_stmt': frozenset({"'continue'"}),
 'decorated': frozenset({"'@'"}),
 'decorator': frozenset({"'@'"}),
 'decorators': frozenset({"'@'"}),
 'del_stmt': frozenset({"'del'"}),
 'dictorsetmaker': frozenset({"'('",
                              "'+'",
                              "'-'",
                              "'...'",
                              "'False'",
                              "'None'",
                              "'True'",
                              "'['",
                              "'lambda'",
                              "'not'",
                              "'{'",
                              "'~'",
                              'NAME',
                              'NUMBER',
                              'STRING'}),
 'dotted_as_name': frozenset({'NAME'}),
 'dotted_as_names': frozenset({'NAME'}),
 'dotted_name': frozenset({'NAME'}),
 'encoding_decl': frozenset({'NAME'}),
 'eval_input': frozenset({"'('",
                          "'+'",
                          "'-'",
                          "'...'",
                          "'False'",
                          "'None'",
                          "'True'",
                          "'['",
                          "'lambda'",
                          "'not'",
                          "'{'",
                          "'~'",
                          'NAME',
                          'NUMBER',
                          'STRING'}),
 'except_clause': frozenset({"'except'"}),
 'expr': frozenset({"'('",
                    "'+'",
                    "'-'",
                    "'...'",
                    "'False'",
                    "'None'",
                    "'True'",
                    "'['",
                    "'{'",
                    "'~'",
                    'NAME',
                    'NUMBER',
                    'STRING'}),
 'expr_stmt': frozenset({"'('",
                         "'*'",
                         "'+'",
                         "'-'",
                         "'...'",
                         "'False'",
                         "'None'",
                         "'True'",
                         "'['",
                         "'lambda'",
                         "'not'",
                         "'{'",
                         "'~'",
                         'NAME',
                         'NUMBER',
                         'STRING'}),
 'exprlist': frozenset({"'('",
                        "'*'",
                        "'+'",
                        "'-'",
                        "'...'",
                        "'False'",
                        "'None'",
                        "'True'",
                        "'['",
                        "'{'",
                        "'~'",
                        'NAME',
                        'NUMBER',
                        'STRING'}),
 'factor': frozenset({"'('",
                      "'+'",
                      "'-'",
                      "'...'",
                      "'False'",
                      "'None'",
                      "'True'",
                      "'['",
                      "'{'",
                      "'~'",
                      'NAME',
                      'NUMBER',
                      'STRING'}),
 'file_input': frozenset({"'('",
                          "'*'",
                          "'+'",
                          "'-'",
                          "'...'",
                          "'@'",
                          "'False'",
                          "'None'",
                          "'True'",
                          "'['",
                          "'assert'",
                          "'break'",
                          "'class'",
                          "'continue'",
                          "'def'",
                          "'del'",
                          "'for'",
                          "'from'",
                          "'global'",
                          "'if'",
                          "'import'",
                          "'lambda'",
                          "'nonlocal'",
                          "'not'",
                          "'pass'",
                          "'raise'",
                          "'return'",
                          "'try'",
                          "'while'",
                          "'with'",
                          "'yield'",
                          "'{'",
                          "'~'",
                          'ENDMARKER',
                          'NAME',
                          'NEWLINE',
                          'NUMBER',
                          'STRING'}),
 'flow_stmt': frozenset({"'break'",
                         "'continue'",
                         "'raise'",
                         "'return'",
                         "'yield'"}),
 'for_stmt': frozenset({"'for'"}),
 'funcdef': frozenset({"'def'"}),
 'global_stmt': frozenset({"'global'"}),
 'if_stmt': frozenset({"'if'"}),
 'import_as_name': frozenset({'NAME'}),
 'import_as_names': frozenset({'NAME'}),
 'import_from': frozenset({"'from'"}),
 'import_name': frozenset({"'import'"}),
 'import_stmt': frozenset({"'import'", "'from'"}),
 'lambdef': frozenset({"'lambda'"}),
 'lambdef_nocond': frozenset({"'lambda'"}),
 'nonlocal_stmt': frozenset({"'nonlocal'"}),
 'not_test': frozenset({"'('",
                        "'+'",
                        "'-'",
                        "'...'",
                        "'False'",
                        "'None'",
                        "'True'",
                        "'['",
                        "'not'",
                        "'{'",
                        "'~'",
                        'NAME',
                        'NUMBER',
                        'STRING'}),
 'or_test': frozenset({"'('",
                       "'+'",
                       "'-'",
                       "'...'",
                       "'False'",
                       "'None'",
                       "'True'",
                       "'['",
                       "'not'",
                       "'{'",
                       "'~'",
                       'NAME',
                       'NUMBER',
                       'STRING'}),
 'parameters': frozenset({"'('"}),
 'pass_stmt': frozenset({"'pass'"}),
 'power': frozenset({"'('",
                     "'...'",
                     "'False'",
                     "'None'",
                     "'True'",
                     "'['",
                     "'{'",
                     'NAME',
                     'NUMBER',
                     'STRING'}),
 'raise_stmt': frozenset({"'raise'"}),
 'return_stmt': frozenset({"'return'"}),
 'shift_expr': frozenset({"'('",
                          "'+'",
                          "'-'",
                          "'...'",
                          "'False'",
                          "'None'",
                          "'True'",
                          "'['",
                          "'{'",
                          "'~'",
                          'NAME',
                          'NUMBER',
                          'STRING'}),
 'simple_stmt': frozenset({"'('",
                           "'*'",
                           "'+'",
                           "'-'",
                           "'...'",
                           "'False'",
                           "'None'",
                           "'True'",
                           "'['",
                           "'assert'",
                           "'break'",
                           "'continue'",
                           "'del'",
                           "'from'",
                           "'global'",
                           "'import'",
                           "'lambda'",
                           "'nonlocal'",
                           "'not'",
                           "'pass'",
                           "'raise'",
                           "'return'",
                           "'yield'",
                           "'{'",
                           "'~'",
                           'NAME',
                           'NUMBER',
                           'STRING'}),
 'single_input': frozenset({"'('",
                            "'*'",
                            "'+'",
                            "'-'",
                            "'...'",
                            "'@'",
                            "'False'",
                            "'None'",
                            "'True'",
                            "'['",
                            "'assert'",
                            "'break'",
                            "'class'",
                            "'continue'",
                            "'def'",
                            "'del'",
                            "'for'",
                            "'from'",
                            "'global'",
                            "'if'",
                            "'import'",
                            "'lambda'",
                            "'nonlocal'",
                            "'not'",
                            "'pass'",
                            "'raise'",
                            "'return'",
                            "'try'",
                            "'while'",
                            "'with'",
                            "'yield'",
                            "'{'",
                            "'~'",
                            'NAME',
                            'NEWLINE',
                            'NUMBER',
                            'STRING'}),
 'sliceop': frozenset({"':'"}),
 'small_stmt': frozenset({"'('",
                          "'*'",
                          "'+'",
                          "'-'",
                          "'...'",
                          "'False'",
                          "'None'",
                          "'True'",
                          "'['",
                          "'assert'",
                          "'break'",
                          "'continue'",
                          "'del'",
                          "'from'",
                          "'global'",
                          "'import'",
                          "'lambda'",
                          "'nonlocal'",
                          "'not'",
                          "'pass'",
                          "'raise'",
                          "'return'",
                          "'yield'",
                          "'{'",
                          "'~'",
                          'NAME',
                          'NUMBER',
                          'STRING'}),
 'star_expr': frozenset({"'*'"}),
 'stmt': frozenset({"'('",
                    "'*'",
                    "'+'",
                    "'-'",
                    "'...'",
                    "'@'",
                    "'False'",
                    "'None'",
                    "'True'",
                    "'['",
                    "'assert'",
                    "'break'",
                    "'class'",
                    "'continue'",
                    "'def'",
                    "'del'",
                    "'for'",
                    "'from'",
                    "'global'",
                    "'if'",
                    "'import'",
                    "'lambda'",
                    "'nonlocal'",
                    "'not'",
                    "'pass'",
                    "'raise'",
                    "'return'",
                    "'try'",
                    "'while'",
                    "'with'",
                    "'yield'",
                    "'{'",
                    "'~'",
                    'NAME',
                    'NUMBER',
                    'STRING'}),
 'subscript': frozenset({"'('",
                         "'+'",
                         "'-'",
                         "'...'",
                         "':'",
                         "'False'",
                         "'None'",
                         "'True'",
                         "'['",
                         "'lambda'",
                         "'not'",
                         "'{'",
                         "'~'",
                         'NAME',
                         'NUMBER',
                         'STRING'}),
 'subscriptlist': frozenset({"'('",
                             "'+'",
                             "'-'",
                             "'...'",
                             "':'",
                             "'False'",
                             "'None'",
                             "'True'",
                             "'['",
                             "'lambda'",
                             "'not'",
                             "'{'",
                             "'~'",
                             'NAME',
                             'NUMBER',
                             'STRING'}),
 'suite': frozenset({"'('",
                     "'*'",
                     "'+'",
                     "'-'",
                     "'...'",
                     "'False'",
                     "'None'",
                     "'True'",
                     "'['",
                     "'assert'",
                     "'break'",
                     "'continue'",
                     "'del'",
                     "'from'",
                     "'global'",
                     "'import'",
                     "'lambda'",
                     "'nonlocal'",
                     "'not'",
                     "'pass'",
                     "'raise'",
                     "'return'",
                     "'yield'",
                     "'{'",
                     "'~'",
                     'NAME',
                     'NEWLINE',
                     'NUMBER',
                     'STRING'}),
 'term': frozenset({"'('",
                    "'+'",
                    "'-'",
                    "'...'",
                    "'False'",
                    "'None'",
                    "'True'",
                    "'['",
                    "'{'",
                    "'~'",
                    'NAME',
                    'NUMBER',
                    'STRING'}),
 'test': frozenset({"'('",
                    "'+'",
                    "'-'",
                    "'...'",
                    "'False'",
                    "'None'",
                    "'True'",
                    "'['",
                    "'lambda'",
                    "'not'",
                    "'{'",
                    "'~'",
                    'NAME',
                    'NUMBER',
                    'STRING'}),
 'test_nocond': frozenset({"'('",
                           "'+'",
                           "'-'",
                           "'...'",
                           "'False'",
                           "'None'",
                           "'True'",
                           "'['",
                           "'lambda'",
                           "'not'",
                           "'{'",
                           "'~'",
                           'NAME',
                           'NUMBER',
                           'STRING'}),
 'testlist': frozenset({"'('",
                        "'+'",
                        "'-'",
                        "'...'",
                        "'False'",
                        "'None'",
                        "'True'",
                        "'['",
                        "'lambda'",
                        "'not'",
                        "'{'",
                        "'~'",
                        'NAME',
                        'NUMBER',
                        'STRING'}),
 'testlist_comp': frozenset({"'('",
                             "'*'",
                             "'+'",
                             "'-'",
                             "'...'",
                             "'False'",
                             "'None'",
                             "'True'",
                             "'['",
                             "'lambda'",
                             "'not'",
                             "'{'",
                             "'~'",
                             'NAME',
                             'NUMBER',
                             'STRING'}),
 'testlist_star_expr': frozenset({"'('",
                                  "'*'",
                                  "'+'",
                                  "'-'",
                                  "'...'",
                                  "'False'",
                                  "'None'",
                                  "'True'",
                                  "'['",
                                  "'lambda'",
                                  "'not'",
                                  "'{'",
                                  "'~'",
                                  'NAME',
                                  'NUMBER',
                                  'STRING'}),
 'tfpdef': frozenset({'NAME'}),
 'trailer': frozenset({"'('", "'.'", "'['"}),
 'try_stmt': frozenset({"'try'"}),
 'typedargslist': frozenset({"'*'", 'NAME', "'**'"}),
 'varargslist': frozenset({"'*'", 'NAME', "'**'"}),
 'vfpdef': frozenset({'NAME'}),
 'while_stmt': frozenset({"'while'"}),
 'with_item': frozenset({"'('",
                         "'+'",
                         "'-'",
                         "'...'",
                         "'False'",
                         "'None'",
                         "'True'",
                         "'['",
                         "'lambda'",
                         "'not'",
                         "'{'",
                         "'~'",
                         'NAME',
                         'NUMBER',
                         'STRING'}),
 'with_stmt': frozenset({"'with'"}),
 'xor_expr': frozenset({"'('",
                        "'+'",
                        "'-'",
                        "'...'",
                        "'False'",
                        "'None'",
                        "'True'",
                        "'['",
                        "'{'",
                        "'~'",
                        'NAME',
                        'NUMBER',
                        'STRING'}),
 'yield_arg': frozenset({"'('",
                         "'+'",
                         "'-'",
                         "'...'",
                         "'False'",
                         "'None'",
                         "'True'",
                         "'['",
                         "'from'",
                         "'lambda'",
                         "'not'",
                         "'{'",
                         "'~'",
                         'NAME',
                         'NUMBER',
                         'STRING'}),
 'yield_expr': frozenset({"'yield'"}),
 'yield_stmt': frozenset({"'yield'"})}

TABLE=[frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'@'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'assert'",
            "'break'",
            "'class'",
            "'continue'",
            "'def'",
            "'del'",
            "'for'",
            "'from'",
            "'global'",
            "'if'",
            "'import'",
            "'lambda'",
            "'nonlocal'",
            "'not'",
            "'pass'",
            "'raise'",
            "'return'",
            "'try'",
            "'while'",
            "'with'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NEWLINE',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'@'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'assert'",
            "'break'",
            "'class'",
            "'continue'",
            "'def'",
            "'del'",
            "'for'",
            "'from'",
            "'global'",
            "'if'",
            "'import'",
            "'lambda'",
            "'nonlocal'",
            "'not'",
            "'pass'",
            "'raise'",
            "'return'",
            "'try'",
            "'while'",
            "'with'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NEWLINE',
            'NUMBER',
            'STRING'}),
 frozenset({"'def'", "'class'"}),
 frozenset({"'*'", "'**'"}),
 frozenset({"'*'", 'NAME', "'**'"}),
 frozenset({"'*'", "'**'"}),
 frozenset({"'*'", 'NAME', "'**'"}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'@'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'assert'",
            "'break'",
            "'class'",
            "'continue'",
            "'def'",
            "'del'",
            "'for'",
            "'from'",
            "'global'",
            "'if'",
            "'import'",
            "'lambda'",
            "'nonlocal'",
            "'not'",
            "'pass'",
            "'raise'",
            "'return'",
            "'try'",
            "'while'",
            "'with'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'assert'",
            "'break'",
            "'continue'",
            "'del'",
            "'from'",
            "'global'",
            "'import'",
            "'lambda'",
            "'nonlocal'",
            "'not'",
            "'pass'",
            "'raise'",
            "'return'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'%='",
            "'&='",
            "'**='",
            "'*='",
            "'+='",
            "'-='",
            "'//='",
            "'/='",
            "'<<='",
            "'='",
            "'>>='",
            "'^='",
            "'|='",
            'EPS'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'%='",
            "'&='",
            "'**='",
            "'*='",
            "'+='",
            "'-='",
            "'//='",
            "'/='",
            "'<<='",
            "'>>='",
            "'^='",
            "'|='"}),
 frozenset({"'break'", "'continue'", "'raise'", "'yield'", "'return'"}),
 frozenset({"'import'", "'from'"}),
 frozenset({"'...'", "'.'"}),
 frozenset({"'...'", "'.'"}),
 frozenset({"'.'", "'...'", 'EPS', 'NAME'}),
 frozenset({"'*'", "'('", 'NAME'}),
 frozenset({"'@'",
            "'class'",
            "'def'",
            "'for'",
            "'if'",
            "'try'",
            "'while'",
            "'with'"}),
 frozenset({"'else'", 'EPS', "'finally'", "'except'"}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'assert'",
            "'break'",
            "'continue'",
            "'del'",
            "'from'",
            "'global'",
            "'import'",
            "'lambda'",
            "'nonlocal'",
            "'not'",
            "'pass'",
            "'raise'",
            "'return'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NEWLINE',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'!='",
            "'<'",
            "'<='",
            "'<>'",
            "'=='",
            "'>'",
            "'>='",
            "'in'",
            "'is'",
            "'not'"}),
 frozenset({"'>>'", "'<<'"}),
 frozenset({"'-'", "'+'"}),
 frozenset({"'//'", "'*'", "'/'", "'%'"}),
 frozenset({"'-'", "'~'", "'+'"}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'yield'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'{'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'for'", 'EPS', "','"}),
 frozenset({"'('", "'.'", "'['"}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "':'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'for'", 'EPS', "','"}),
 frozenset({"'for'", 'EPS', "','"}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'*'",
            "'**'",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'}),
 frozenset({"'for'", "'if'"}),
 frozenset({"'('",
            "'+'",
            "'-'",
            "'...'",
            "'False'",
            "'None'",
            "'True'",
            "'['",
            "'from'",
            "'lambda'",
            "'not'",
            "'{'",
            "'~'",
            'NAME',
            'NUMBER',
            'STRING'})]

class parser(parserbase.parser_base):
    def __init__(self, toks):
        parserbase.parser_base.__init__(self, toks)
        
    def is_special_name(self, name):
        return name in SPECIAL_NAMES

    def parsehelper_3(self, node):
        """ ## subexpr ##
        'NEWLINE'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NEWLINE):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NEWLINE', tok)]

    def parsehelper_2(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NEWLINE'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_3(node) # NEWLINE
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_5(self, node):
        """ ## subexpr ##
        'simple_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_simple_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_4(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['simple_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_5(node) # simple_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_7(self, node):
        """ ## subexpr ##
        'compound_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_compound_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_8(self, node):
        """ ## subexpr ##
        'NEWLINE'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NEWLINE):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NEWLINE', tok)]

    def parsehelper_6(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['compound_stmt', 'NEWLINE'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_7(node) # compound_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_8(node) # NEWLINE
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_1(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['NEWLINE']), GrammarNode('S', ['simple_stmt']), GrammarNode('S', ['compound_stmt', 'NEWLINE'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[0]) and not ('EPS' in TABLE[0]):
            self.pos = oldpos
            return None

        c = self.parsehelper_6(node) # (1, 2, 1), GrammarNode('S', ['compound_stmt', 'NEWLINE']) FIRST: frozenset({"'with'", "'def'", "'class'", "'for'", "'if'", "'@'", "'try'", "'while'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_2(node) # (1, 1, 1), GrammarNode('S', ['NEWLINE']) FIRST: frozenset({'NEWLINE'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_4(node) # (1, 1, 0), GrammarNode('S', ['simple_stmt']) FIRST: frozenset({"'raise'", "'True'", "'~'", "'not'", "'None'", 'NUMBER', "'{'", "'lambda'", "'*'", "'nonlocal'", "'...'", 'STRING', "'return'", "'assert'", 'NAME', "'global'", "'False'", "'pass'", "'import'", "'-'", "'yield'", "'del'", "'('", "'from'", "'['", "'break'", "'continue'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_single_input(self):
        """
        single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
        
        ['single_input', ':', GrammarNode('A', [GrammarNode('S', ['NEWLINE']),
        GrammarNode('S', ['simple_stmt']), GrammarNode('S', ['compound_stmt',
        'NEWLINE'])])]
        """
        node = astnode('single_input')
        if self.tok_peek_gstr().isdisjoint(FIRST['single_input']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_1(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_13(self, node):
        """ ## subexpr ##
        'NEWLINE'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NEWLINE):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NEWLINE', tok)]

    def parsehelper_12(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NEWLINE'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_13(node) # NEWLINE
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_15(self, node):
        """ ## subexpr ##
        'stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_14(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_15(node) # stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_11(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['NEWLINE']), GrammarNode('S', ['stmt'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[1]) and not ('EPS' in TABLE[1]):
            self.pos = oldpos
            return None

        c = self.parsehelper_12(node) # (1, 1, 1), GrammarNode('S', ['NEWLINE']) FIRST: frozenset({'NEWLINE'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_14(node) # (1, 1, 0), GrammarNode('S', ['stmt']) FIRST: frozenset({"'True'", "'~'", 'NUMBER', "'def'", "'...'", "'try'", "'return'", "'assert'", "'False'", "'import'", "'yield'", "'('", "'break'", "'*'", "'@'", "'raise'", 'STRING', "'not'", "'None'", "'{'", "'class'", "'lambda'", "'continue'", "'nonlocal'", "'while'", 'NAME', "'del'", "'pass'", "'-'", "'['", "'global'", "'for'", "'from'", "'if'", "'with'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_10(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('A', [GrammarNode('S', ['NEWLINE']), GrammarNode('S', ['stmt'])]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_11(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_16(self, node):
        """ ## subexpr ##
        'ENDMARKER'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_ENDMARKER):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('ENDMARKER', tok)]

    def parsehelper_9(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ['NEWLINE']), GrammarNode('S', ['stmt'])])), 'ENDMARKER'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_10(node) # GrammarNode('*', GrammarNode('A', [GrammarNode('S', ['NEWLINE']), GrammarNode('S', ['stmt'])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_16(node) # ENDMARKER
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_file_input(self):
        """
        file_input: (NEWLINE | stmt)* ENDMARKER
        
        ['file_input', ':', GrammarNode('S', [GrammarNode('*',
        GrammarNode('A', [GrammarNode('S', ['NEWLINE']), GrammarNode('S',
        ['stmt'])])), 'ENDMARKER'])]
        """
        node = astnode('file_input')
        if self.tok_peek_gstr().isdisjoint(FIRST['file_input']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_9(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_18(self, node):
        """ ## subexpr ##
        'testlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_21(self, node):
        """ ## subexpr ##
        'NEWLINE'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NEWLINE):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NEWLINE', tok)]

    def parsehelper_20(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NEWLINE'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_21(node) # NEWLINE
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_19(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ['NEWLINE']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_20(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_22(self, node):
        """ ## subexpr ##
        'ENDMARKER'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_ENDMARKER):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('ENDMARKER', tok)]

    def parsehelper_17(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist', GrammarNode('*', GrammarNode('S', ['NEWLINE'])), 'ENDMARKER'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_18(node) # testlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_19(node) # GrammarNode('*', GrammarNode('S', ['NEWLINE']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_22(node) # ENDMARKER
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_eval_input(self):
        """
        eval_input: testlist NEWLINE* ENDMARKER
        
        ['eval_input', ':', GrammarNode('S', ['testlist', GrammarNode('*',
        GrammarNode('S', ['NEWLINE'])), 'ENDMARKER'])]
        """
        node = astnode('eval_input')
        if self.tok_peek_gstr().isdisjoint(FIRST['eval_input']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_17(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_24(self, node):
        """ ## subexpr ##
        "'@'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_AT, '@'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'@'", tok)]

    def parsehelper_25(self, node):
        """ ## subexpr ##
        'dotted_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_dotted_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_28(self, node):
        """ ## subexpr ##
        "'('"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LPAR, '('):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'('", tok)]

    def parsehelper_31(self, node):
        """ ## subexpr ##
        'arglist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_arglist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_30(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['arglist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_31(node) # arglist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_29(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['arglist']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_30(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_32(self, node):
        """ ## subexpr ##
        "')'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RPAR, ')'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("')'", tok)]

    def parsehelper_27(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_28(node) # '('
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_29(node) # GrammarNode('[', GrammarNode('S', ['arglist']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_32(node) # ')'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_26(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_27(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_33(self, node):
        """ ## subexpr ##
        'NEWLINE'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NEWLINE):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NEWLINE', tok)]

    def parsehelper_23(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'@'", 'dotted_name', GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"])), 'NEWLINE'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_24(node) # '@'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_25(node) # dotted_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_26(node) # GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_33(node) # NEWLINE
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_decorator(self):
        """
        decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
        
        ['decorator', ':', GrammarNode('S', ["'@'", 'dotted_name',
        GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[',
        GrammarNode('S', ['arglist'])), "')'"])), 'NEWLINE'])]
        """
        node = astnode('decorator')
        if self.tok_peek_gstr().isdisjoint(FIRST['decorator']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_23(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_37(self, node):
        """ ## subexpr ##
        'decorator'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_decorator()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_36(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['decorator'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_37(node) # decorator
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_35(self, node):
        """ ## subexpr ##
        GrammarNode('+', GrammarNode('S', ['decorator']))
        """
        oldpos = self.pos
        #

        # +-type (1+)
        childs = []
        i = 0
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_36(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
            i = i + 1
        if i == 0:
            self.pos = oldpos
            return None
        return childs

    def parsehelper_34(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('+', GrammarNode('S', ['decorator']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_35(node) # GrammarNode('+', GrammarNode('S', ['decorator']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_decorators(self):
        """
        decorators: decorator+
        
        ['decorators', ':', GrammarNode('S', [GrammarNode('+',
        GrammarNode('S', ['decorator']))])]
        """
        node = astnode('decorators')
        if self.tok_peek_gstr().isdisjoint(FIRST['decorators']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_34(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_39(self, node):
        """ ## subexpr ##
        'decorators'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_decorators()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_42(self, node):
        """ ## subexpr ##
        'classdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_classdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_41(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['classdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_42(node) # classdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_44(self, node):
        """ ## subexpr ##
        'funcdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_funcdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_43(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['funcdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_44(node) # funcdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_40(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['classdef']), GrammarNode('S', ['funcdef'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[2]) and not ('EPS' in TABLE[2]):
            self.pos = oldpos
            return None

        c = self.parsehelper_41(node) # (1, 1, 1), GrammarNode('S', ['classdef']) FIRST: frozenset({"'class'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_43(node) # (1, 1, 1), GrammarNode('S', ['funcdef']) FIRST: frozenset({"'def'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_38(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['decorators', GrammarNode('A', [GrammarNode('S', ['classdef']), GrammarNode('S', ['funcdef'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_39(node) # decorators
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_40(node) # GrammarNode('A', [GrammarNode('S', ['classdef']), GrammarNode('S', ['funcdef'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_decorated(self):
        """
        decorated: decorators (classdef | funcdef)
        
        ['decorated', ':', GrammarNode('S', ['decorators', GrammarNode('A',
        [GrammarNode('S', ['classdef']), GrammarNode('S', ['funcdef'])])])]
        """
        node = astnode('decorated')
        if self.tok_peek_gstr().isdisjoint(FIRST['decorated']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_38(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_46(self, node):
        """ ## subexpr ##
        "'def'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'def'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'def'", tok)]

    def parsehelper_47(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_48(self, node):
        """ ## subexpr ##
        'parameters'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_parameters()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_51(self, node):
        """ ## subexpr ##
        "'->'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RARROW, '->'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'->'", tok)]

    def parsehelper_52(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_50(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'->'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_51(node) # '->'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_52(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_49(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'->'", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_50(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_53(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_54(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_45(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'def'", 'NAME', 'parameters', GrammarNode('[', GrammarNode('S', ["'->'", 'test'])), "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_46(node) # 'def'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_47(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_48(node) # parameters
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_49(node) # GrammarNode('[', GrammarNode('S', ["'->'", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_53(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_54(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_funcdef(self):
        """
        funcdef: 'def' NAME parameters ['->' test] ':' suite
        
        ['funcdef', ':', GrammarNode('S', ["'def'", 'NAME', 'parameters',
        GrammarNode('[', GrammarNode('S', ["'->'", 'test'])), "':'",
        'suite'])]
        """
        node = astnode('funcdef')
        if self.tok_peek_gstr().isdisjoint(FIRST['funcdef']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_45(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_56(self, node):
        """ ## subexpr ##
        "'('"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LPAR, '('):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'('", tok)]

    def parsehelper_59(self, node):
        """ ## subexpr ##
        'typedargslist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_typedargslist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_58(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['typedargslist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_59(node) # typedargslist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_57(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['typedargslist']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_58(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_60(self, node):
        """ ## subexpr ##
        "')'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RPAR, ')'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("')'", tok)]

    def parsehelper_55(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['typedargslist'])), "')'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_56(node) # '('
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_57(node) # GrammarNode('[', GrammarNode('S', ['typedargslist']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_60(node) # ')'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_parameters(self):
        """
        parameters: '(' [typedargslist] ')'
        
        ['parameters', ':', GrammarNode('S', ["'('", GrammarNode('[',
        GrammarNode('S', ['typedargslist'])), "')'"])]
        """
        node = astnode('parameters')
        if self.tok_peek_gstr().isdisjoint(FIRST['parameters']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_55(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_64(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_67(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_68(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_66(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_67(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_68(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_65(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_66(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_71(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_72(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_75(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_76(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_74(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_75(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_76(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_73(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_74(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_70(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_71(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_72(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_73(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_69(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_70(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_79(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_83(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_86(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_85(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['tfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_86(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_84(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['tfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_85(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_89(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_90(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_93(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_94(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_92(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_93(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_94(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_91(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_92(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_88(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_89(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_90(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_91(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_87(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_88(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_97(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_98(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_99(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_96(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", "'**'", 'tfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_97(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_98(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_99(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_95(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_96(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_82(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_83(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_84(node) # GrammarNode('[', GrammarNode('S', ['tfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_87(node) # GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_95(node) # GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_101(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_102(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_100(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'**'", 'tfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_101(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_102(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_81(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[3]) and not ('EPS' in TABLE[3]):
            self.pos = oldpos
            return None

        c = self.parsehelper_82(node) # (1, 4, 1), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_100(node) # (1, 2, 1), GrammarNode('S', ["'**'", 'tfpdef']) FIRST: frozenset({"'**'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_80(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_81(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_78(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_79(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_80(node) # GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_77(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_78(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_63(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_64(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_65(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_69(node) # GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_77(node) # GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_104(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_107(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_106(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['tfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_107(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_105(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['tfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_106(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_110(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_111(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_114(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_115(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_113(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_114(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_115(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_112(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_113(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_109(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_110(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_111(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_112(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_108(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_109(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_118(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_119(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_120(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_117(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", "'**'", 'tfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_118(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_119(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_120(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_116(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_117(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_103(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_104(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_105(node) # GrammarNode('[', GrammarNode('S', ['tfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_108(node) # GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_116(node) # GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_122(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_123(self, node):
        """ ## subexpr ##
        'tfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_tfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_121(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'**'", 'tfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_122(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_123(node) # tfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_62(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))]), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[4]) and not ('EPS' in TABLE[4]):
            self.pos = oldpos
            return None

        c = self.parsehelper_103(node) # (1, 4, 1), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_63(node) # (1, 4, 0), GrammarNode('S', ['tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))]) FIRST: frozenset({'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_121(node) # (1, 2, 1), GrammarNode('S', ["'**'", 'tfpdef']) FIRST: frozenset({"'**'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_61(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ['tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))]), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_62(node) # GrammarNode('A', [GrammarNode('S', ['tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))]), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_typedargslist(self):
        """
        typedargslist: (tfpdef ['=' test] (',' tfpdef ['=' test])* [',' ['*'
        [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef]] |
        '*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef)
        
        ['typedargslist', ':', GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', ['tfpdef', GrammarNode('[', GrammarNode('S', ["'='",
        'test'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef',
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))])),
        GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[',
        GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[',
        GrammarNode('S', ['tfpdef'])), GrammarNode('*', GrammarNode('S',
        ["','", 'tfpdef', GrammarNode('[', GrammarNode('S', ["'='",
        'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'",
        'tfpdef']))]), GrammarNode('S', ["'**'", 'tfpdef'])]))]))]),
        GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S',
        ['tfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'tfpdef',
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))])),
        GrammarNode('[', GrammarNode('S', ["','", "'**'", 'tfpdef']))]),
        GrammarNode('S', ["'**'", 'tfpdef'])])])]
        """
        node = astnode('typedargslist')
        if self.tok_peek_gstr().isdisjoint(FIRST['typedargslist']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_61(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_125(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_128(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_129(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_127(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["':'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_128(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_129(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_126(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["':'", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_127(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_124(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NAME', GrammarNode('[', GrammarNode('S', ["':'", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_125(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_126(node) # GrammarNode('[', GrammarNode('S', ["':'", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_tfpdef(self):
        """
        tfpdef: NAME [':' test]
        
        ['tfpdef', ':', GrammarNode('S', ['NAME', GrammarNode('[',
        GrammarNode('S', ["':'", 'test']))])]
        """
        node = astnode('tfpdef')
        if self.tok_peek_gstr().isdisjoint(FIRST['tfpdef']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_124(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_133(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_136(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_137(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_135(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_136(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_137(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_134(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_135(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_140(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_141(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_144(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_145(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_143(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_144(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_145(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_142(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_143(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_139(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_140(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_141(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_142(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_138(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_139(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_148(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_152(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_155(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_154(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['vfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_155(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_153(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['vfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_154(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_158(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_159(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_162(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_163(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_161(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_162(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_163(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_160(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_161(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_157(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_158(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_159(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_160(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_156(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_157(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_166(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_167(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_168(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_165(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", "'**'", 'vfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_166(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_167(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_168(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_164(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_165(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_151(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_152(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_153(node) # GrammarNode('[', GrammarNode('S', ['vfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_156(node) # GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_164(node) # GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_170(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_171(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_169(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'**'", 'vfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_170(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_171(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_150(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[5]) and not ('EPS' in TABLE[5]):
            self.pos = oldpos
            return None

        c = self.parsehelper_151(node) # (1, 4, 1), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_169(node) # (1, 2, 1), GrammarNode('S', ["'**'", 'vfpdef']) FIRST: frozenset({"'**'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_149(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_150(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_147(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_148(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_149(node) # GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_146(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_147(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_132(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_133(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_134(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_138(node) # GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_146(node) # GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_173(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_176(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_175(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['vfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_176(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_174(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['vfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_175(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_179(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_180(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_183(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_184(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_182(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_183(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_184(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_181(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_182(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_178(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_179(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_180(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_181(node) # GrammarNode('[', GrammarNode('S', ["'='", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_177(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_178(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_187(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_188(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_189(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_186(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", "'**'", 'vfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_187(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_188(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_189(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_185(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_186(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_172(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_173(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_174(node) # GrammarNode('[', GrammarNode('S', ['vfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_177(node) # GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_185(node) # GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_191(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_192(self, node):
        """ ## subexpr ##
        'vfpdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_vfpdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_190(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'**'", 'vfpdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_191(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_192(node) # vfpdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_131(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))]), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[6]) and not ('EPS' in TABLE[6]):
            self.pos = oldpos
            return None

        c = self.parsehelper_172(node) # (1, 4, 1), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_132(node) # (1, 4, 0), GrammarNode('S', ['vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))]) FIRST: frozenset({'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_190(node) # (1, 2, 1), GrammarNode('S', ["'**'", 'vfpdef']) FIRST: frozenset({"'**'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_130(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ['vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))]), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_131(node) # GrammarNode('A', [GrammarNode('S', ['vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))]), GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='", 'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_varargslist(self):
        """
        varargslist: (vfpdef ['=' test] (',' vfpdef ['=' test])* [',' ['*'
        [vfpdef] (',' vfpdef ['=' test])* [',' '**' vfpdef] | '**' vfpdef]] |
        '*' [vfpdef] (',' vfpdef ['=' test])* [',' '**' vfpdef] | '**' vfpdef)
        
        ['varargslist', ':', GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', ['vfpdef', GrammarNode('[', GrammarNode('S', ["'='",
        'test'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef',
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))])),
        GrammarNode('[', GrammarNode('S', ["','", GrammarNode('[',
        GrammarNode('A', [GrammarNode('S', ["'*'", GrammarNode('[',
        GrammarNode('S', ['vfpdef'])), GrammarNode('*', GrammarNode('S',
        ["','", 'vfpdef', GrammarNode('[', GrammarNode('S', ["'='",
        'test']))])), GrammarNode('[', GrammarNode('S', ["','", "'**'",
        'vfpdef']))]), GrammarNode('S', ["'**'", 'vfpdef'])]))]))]),
        GrammarNode('S', ["'*'", GrammarNode('[', GrammarNode('S',
        ['vfpdef'])), GrammarNode('*', GrammarNode('S', ["','", 'vfpdef',
        GrammarNode('[', GrammarNode('S', ["'='", 'test']))])),
        GrammarNode('[', GrammarNode('S', ["','", "'**'", 'vfpdef']))]),
        GrammarNode('S', ["'**'", 'vfpdef'])])])]
        """
        node = astnode('varargslist')
        if self.tok_peek_gstr().isdisjoint(FIRST['varargslist']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_130(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_194(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_193(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_194(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_vfpdef(self):
        """
        vfpdef: NAME
        
        ['vfpdef', ':', GrammarNode('S', ['NAME'])]
        """
        node = astnode('vfpdef')
        if self.tok_peek_gstr().isdisjoint(FIRST['vfpdef']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_193(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_197(self, node):
        """ ## subexpr ##
        'simple_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_simple_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_196(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['simple_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_197(node) # simple_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_199(self, node):
        """ ## subexpr ##
        'compound_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_compound_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_198(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['compound_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_199(node) # compound_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_195(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['simple_stmt']), GrammarNode('S', ['compound_stmt'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[7]) and not ('EPS' in TABLE[7]):
            self.pos = oldpos
            return None

        c = self.parsehelper_198(node) # (1, 1, 1), GrammarNode('S', ['compound_stmt']) FIRST: frozenset({"'with'", "'def'", "'class'", "'for'", "'if'", "'@'", "'try'", "'while'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_196(node) # (1, 1, 0), GrammarNode('S', ['simple_stmt']) FIRST: frozenset({"'raise'", "'True'", "'~'", "'not'", "'None'", 'NUMBER', "'{'", "'lambda'", "'*'", "'nonlocal'", "'...'", 'STRING', "'return'", "'assert'", 'NAME', "'global'", "'False'", "'pass'", "'import'", "'-'", "'yield'", "'del'", "'('", "'from'", "'['", "'break'", "'continue'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_stmt(self):
        """
        stmt: simple_stmt | compound_stmt
        
        ['stmt', ':', GrammarNode('A', [GrammarNode('S', ['simple_stmt']),
        GrammarNode('S', ['compound_stmt'])])]
        """
        node = astnode('stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_195(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_201(self, node):
        """ ## subexpr ##
        'small_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_small_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_204(self, node):
        """ ## subexpr ##
        "';'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_SEMI, ';'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("';'", tok)]

    def parsehelper_205(self, node):
        """ ## subexpr ##
        'small_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_small_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_203(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["';'", 'small_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_204(node) # ';'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_205(node) # small_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_202(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["';'", 'small_stmt']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_203(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_208(self, node):
        """ ## subexpr ##
        "';'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_SEMI, ';'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("';'", tok)]

    def parsehelper_207(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["';'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_208(node) # ';'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_206(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["';'"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_207(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_209(self, node):
        """ ## subexpr ##
        'NEWLINE'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NEWLINE):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NEWLINE', tok)]

    def parsehelper_200(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['small_stmt', GrammarNode('*', GrammarNode('S', ["';'", 'small_stmt'])), GrammarNode('[', GrammarNode('S', ["';'"])), 'NEWLINE'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_201(node) # small_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_202(node) # GrammarNode('*', GrammarNode('S', ["';'", 'small_stmt']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_206(node) # GrammarNode('[', GrammarNode('S', ["';'"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_209(node) # NEWLINE
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_simple_stmt(self):
        """
        simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
        
        ['simple_stmt', ':', GrammarNode('S', ['small_stmt', GrammarNode('*',
        GrammarNode('S', ["';'", 'small_stmt'])), GrammarNode('[',
        GrammarNode('S', ["';'"])), 'NEWLINE'])]
        """
        node = astnode('simple_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['simple_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_200(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_213(self, node):
        """ ## subexpr ##
        'expr_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_expr_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_212(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['expr_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_213(node) # expr_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_215(self, node):
        """ ## subexpr ##
        'del_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_del_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_214(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['del_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_215(node) # del_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_217(self, node):
        """ ## subexpr ##
        'pass_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_pass_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_216(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['pass_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_217(node) # pass_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_219(self, node):
        """ ## subexpr ##
        'flow_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_flow_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_218(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['flow_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_219(node) # flow_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_221(self, node):
        """ ## subexpr ##
        'import_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_import_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_220(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['import_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_221(node) # import_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_223(self, node):
        """ ## subexpr ##
        'global_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_global_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_222(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['global_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_223(node) # global_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_225(self, node):
        """ ## subexpr ##
        'nonlocal_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_nonlocal_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_224(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['nonlocal_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_225(node) # nonlocal_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_227(self, node):
        """ ## subexpr ##
        'assert_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_assert_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_226(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['assert_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_227(node) # assert_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_211(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['expr_stmt']), GrammarNode('S', ['del_stmt']), GrammarNode('S', ['pass_stmt']), GrammarNode('S', ['flow_stmt']), GrammarNode('S', ['import_stmt']), GrammarNode('S', ['global_stmt']), GrammarNode('S', ['nonlocal_stmt']), GrammarNode('S', ['assert_stmt'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[8]) and not ('EPS' in TABLE[8]):
            self.pos = oldpos
            return None

        c = self.parsehelper_214(node) # (1, 1, 1), GrammarNode('S', ['del_stmt']) FIRST: frozenset({"'del'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_216(node) # (1, 1, 1), GrammarNode('S', ['pass_stmt']) FIRST: frozenset({"'pass'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_218(node) # (1, 1, 1), GrammarNode('S', ['flow_stmt']) FIRST: frozenset({"'break'", "'continue'", "'raise'", "'yield'", "'return'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_220(node) # (1, 1, 1), GrammarNode('S', ['import_stmt']) FIRST: frozenset({"'import'", "'from'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_222(node) # (1, 1, 1), GrammarNode('S', ['global_stmt']) FIRST: frozenset({"'global'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_224(node) # (1, 1, 1), GrammarNode('S', ['nonlocal_stmt']) FIRST: frozenset({"'nonlocal'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_226(node) # (1, 1, 1), GrammarNode('S', ['assert_stmt']) FIRST: frozenset({"'assert'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_212(node) # (1, 1, 0), GrammarNode('S', ['expr_stmt']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", 'NUMBER', "'{'", "'lambda'", "'...'", 'STRING', 'NAME', "'False'", "'-'", "'['", "'('", "'*'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_210(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ['expr_stmt']), GrammarNode('S', ['del_stmt']), GrammarNode('S', ['pass_stmt']), GrammarNode('S', ['flow_stmt']), GrammarNode('S', ['import_stmt']), GrammarNode('S', ['global_stmt']), GrammarNode('S', ['nonlocal_stmt']), GrammarNode('S', ['assert_stmt'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_211(node) # GrammarNode('A', [GrammarNode('S', ['expr_stmt']), GrammarNode('S', ['del_stmt']), GrammarNode('S', ['pass_stmt']), GrammarNode('S', ['flow_stmt']), GrammarNode('S', ['import_stmt']), GrammarNode('S', ['global_stmt']), GrammarNode('S', ['nonlocal_stmt']), GrammarNode('S', ['assert_stmt'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_small_stmt(self):
        """
        small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
        import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
        
        ['small_stmt', ':', GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', ['expr_stmt']), GrammarNode('S', ['del_stmt']),
        GrammarNode('S', ['pass_stmt']), GrammarNode('S', ['flow_stmt']),
        GrammarNode('S', ['import_stmt']), GrammarNode('S', ['global_stmt']),
        GrammarNode('S', ['nonlocal_stmt']), GrammarNode('S',
        ['assert_stmt'])])])]
        """
        node = astnode('small_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['small_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_210(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_229(self, node):
        """ ## subexpr ##
        'testlist_star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_232(self, node):
        """ ## subexpr ##
        'augassign'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_augassign()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_235(self, node):
        """ ## subexpr ##
        'yield_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_yield_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_234(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['yield_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_235(node) # yield_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_237(self, node):
        """ ## subexpr ##
        'testlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_236(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_237(node) # testlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_233(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[9]) and not ('EPS' in TABLE[9]):
            self.pos = oldpos
            return None

        c = self.parsehelper_234(node) # (1, 1, 1), GrammarNode('S', ['yield_expr']) FIRST: frozenset({"'yield'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_236(node) # (1, 1, 0), GrammarNode('S', ['testlist']) FIRST: frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'lambda'", "'...'", "'+'", 'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_231(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['augassign', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_232(node) # augassign
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_233(node) # GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_241(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_244(self, node):
        """ ## subexpr ##
        'yield_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_yield_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_243(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['yield_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_244(node) # yield_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_246(self, node):
        """ ## subexpr ##
        'testlist_star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_245(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist_star_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_246(node) # testlist_star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_242(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[10]) and not ('EPS' in TABLE[10]):
            self.pos = oldpos
            return None

        c = self.parsehelper_243(node) # (1, 1, 1), GrammarNode('S', ['yield_expr']) FIRST: frozenset({"'yield'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_245(node) # (1, 1, 0), GrammarNode('S', ['testlist_star_expr']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", 'NUMBER', "'{'", "'lambda'", "'...'", 'STRING', 'NAME', "'False'", "'-'", "'['", "'('", "'*'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_240(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_241(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_242(node) # GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_239(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_240(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_238(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_239(node) # GrammarNode('*', GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_230(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['augassign', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])]), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])]))])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[11]) and not ('EPS' in TABLE[11]):
            self.pos = oldpos
            return None

        c = self.parsehelper_231(node) # (1, 2, 1), GrammarNode('S', ['augassign', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])]) FIRST: frozenset({"'>>='", "'*='", "'%='", "'**='", "'&='", "'|='", "'+='", "'^='", "'//='", "'/='", "'-='", "'<<='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_238(node) # (0, 2, 1), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])]))]) FIRST: frozenset({"'='", 'EPS'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_228(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist_star_expr', GrammarNode('A', [GrammarNode('S', ['augassign', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])]), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])]))])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_229(node) # testlist_star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_230(node) # GrammarNode('A', [GrammarNode('S', ['augassign', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])]), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["'='", GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_star_expr'])])]))])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_expr_stmt(self):
        """
        expr_stmt: testlist_star_expr (augassign (yield_expr|testlist) | ('='
        (yield_expr|testlist_star_expr))*)
        
        ['expr_stmt', ':', GrammarNode('S', ['testlist_star_expr',
        GrammarNode('A', [GrammarNode('S', ['augassign', GrammarNode('A',
        [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist'])])]),
        GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["'='",
        GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S',
        ['testlist_star_expr'])])]))])])])]
        """
        node = astnode('expr_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['expr_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_228(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_250(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_249(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_250(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_252(self, node):
        """ ## subexpr ##
        'star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_251(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['star_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_252(node) # star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_248(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[12]) and not ('EPS' in TABLE[12]):
            self.pos = oldpos
            return None

        c = self.parsehelper_251(node) # (1, 1, 1), GrammarNode('S', ['star_expr']) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_249(node) # (1, 1, 0), GrammarNode('S', ['test']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_255(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_258(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_257(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_258(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_260(self, node):
        """ ## subexpr ##
        'star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_259(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['star_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_260(node) # star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_256(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[13]) and not ('EPS' in TABLE[13]):
            self.pos = oldpos
            return None

        c = self.parsehelper_259(node) # (1, 1, 1), GrammarNode('S', ['star_expr']) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_257(node) # (1, 1, 0), GrammarNode('S', ['test']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_254(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_255(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_256(node) # GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_253(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_254(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_263(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_262(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_263(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_261(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_262(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_247(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])]), GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_248(node) # GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_253(node) # GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_261(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_testlist_star_expr(self):
        """
        testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
        
        ['testlist_star_expr', ':', GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])]),
        GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A',
        [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])),
        GrammarNode('[', GrammarNode('S', ["','"]))])]
        """
        node = astnode('testlist_star_expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['testlist_star_expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_247(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_267(self, node):
        """ ## subexpr ##
        "'+='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_PLUSEQUAL, '+='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'+='", tok)]

    def parsehelper_266(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'+='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_267(node) # '+='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_269(self, node):
        """ ## subexpr ##
        "'-='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_MINEQUAL, '-='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'-='", tok)]

    def parsehelper_268(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'-='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_269(node) # '-='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_271(self, node):
        """ ## subexpr ##
        "'*='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAREQUAL, '*='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*='", tok)]

    def parsehelper_270(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_271(node) # '*='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_273(self, node):
        """ ## subexpr ##
        "'/='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_SLASHEQUAL, '/='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'/='", tok)]

    def parsehelper_272(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'/='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_273(node) # '/='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_275(self, node):
        """ ## subexpr ##
        "'%='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_PERCENTEQUAL, '%='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'%='", tok)]

    def parsehelper_274(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'%='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_275(node) # '%='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_277(self, node):
        """ ## subexpr ##
        "'&='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_AMPEREQUAL, '&='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'&='", tok)]

    def parsehelper_276(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'&='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_277(node) # '&='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_279(self, node):
        """ ## subexpr ##
        "'|='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_VBAREQUAL, '|='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'|='", tok)]

    def parsehelper_278(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'|='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_279(node) # '|='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_281(self, node):
        """ ## subexpr ##
        "'^='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_CIRCUMFLEXEQUAL, '^='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'^='", tok)]

    def parsehelper_280(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'^='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_281(node) # '^='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_283(self, node):
        """ ## subexpr ##
        "'<<='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LEFTSHIFTEQUAL, '<<='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'<<='", tok)]

    def parsehelper_282(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'<<='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_283(node) # '<<='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_285(self, node):
        """ ## subexpr ##
        "'>>='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RIGHTSHIFTEQUAL, '>>='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'>>='", tok)]

    def parsehelper_284(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'>>='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_285(node) # '>>='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_287(self, node):
        """ ## subexpr ##
        "'**='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAREQUAL, '**='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**='", tok)]

    def parsehelper_286(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'**='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_287(node) # '**='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_289(self, node):
        """ ## subexpr ##
        "'//='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESLASHEQUAL, '//='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'//='", tok)]

    def parsehelper_288(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'//='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_289(node) # '//='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_265(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'+='"]), GrammarNode('S', ["'-='"]), GrammarNode('S', ["'*='"]), GrammarNode('S', ["'/='"]), GrammarNode('S', ["'%='"]), GrammarNode('S', ["'&='"]), GrammarNode('S', ["'|='"]), GrammarNode('S', ["'^='"]), GrammarNode('S', ["'<<='"]), GrammarNode('S', ["'>>='"]), GrammarNode('S', ["'**='"]), GrammarNode('S', ["'//='"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[14]) and not ('EPS' in TABLE[14]):
            self.pos = oldpos
            return None

        c = self.parsehelper_266(node) # (1, 1, 1), GrammarNode('S', ["'+='"]) FIRST: frozenset({"'+='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_268(node) # (1, 1, 1), GrammarNode('S', ["'-='"]) FIRST: frozenset({"'-='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_270(node) # (1, 1, 1), GrammarNode('S', ["'*='"]) FIRST: frozenset({"'*='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_272(node) # (1, 1, 1), GrammarNode('S', ["'/='"]) FIRST: frozenset({"'/='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_274(node) # (1, 1, 1), GrammarNode('S', ["'%='"]) FIRST: frozenset({"'%='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_276(node) # (1, 1, 1), GrammarNode('S', ["'&='"]) FIRST: frozenset({"'&='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_278(node) # (1, 1, 1), GrammarNode('S', ["'|='"]) FIRST: frozenset({"'|='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_280(node) # (1, 1, 1), GrammarNode('S', ["'^='"]) FIRST: frozenset({"'^='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_282(node) # (1, 1, 1), GrammarNode('S', ["'<<='"]) FIRST: frozenset({"'<<='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_284(node) # (1, 1, 1), GrammarNode('S', ["'>>='"]) FIRST: frozenset({"'>>='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_286(node) # (1, 1, 1), GrammarNode('S', ["'**='"]) FIRST: frozenset({"'**='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_288(node) # (1, 1, 1), GrammarNode('S', ["'//='"]) FIRST: frozenset({"'//='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_264(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+='"]), GrammarNode('S', ["'-='"]), GrammarNode('S', ["'*='"]), GrammarNode('S', ["'/='"]), GrammarNode('S', ["'%='"]), GrammarNode('S', ["'&='"]), GrammarNode('S', ["'|='"]), GrammarNode('S', ["'^='"]), GrammarNode('S', ["'<<='"]), GrammarNode('S', ["'>>='"]), GrammarNode('S', ["'**='"]), GrammarNode('S', ["'//='"])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_265(node) # GrammarNode('A', [GrammarNode('S', ["'+='"]), GrammarNode('S', ["'-='"]), GrammarNode('S', ["'*='"]), GrammarNode('S', ["'/='"]), GrammarNode('S', ["'%='"]), GrammarNode('S', ["'&='"]), GrammarNode('S', ["'|='"]), GrammarNode('S', ["'^='"]), GrammarNode('S', ["'<<='"]), GrammarNode('S', ["'>>='"]), GrammarNode('S', ["'**='"]), GrammarNode('S', ["'//='"])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_augassign(self):
        """
        augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
        '<<=' | '>>=' | '**=' | '//=')
        
        ['augassign', ':', GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', ["'+='"]), GrammarNode('S', ["'-='"]),
        GrammarNode('S', ["'*='"]), GrammarNode('S', ["'/='"]),
        GrammarNode('S', ["'%='"]), GrammarNode('S', ["'&='"]),
        GrammarNode('S', ["'|='"]), GrammarNode('S', ["'^='"]),
        GrammarNode('S', ["'<<='"]), GrammarNode('S', ["'>>='"]),
        GrammarNode('S', ["'**='"]), GrammarNode('S', ["'//='"])])])]
        """
        node = astnode('augassign')
        if self.tok_peek_gstr().isdisjoint(FIRST['augassign']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_264(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_291(self, node):
        """ ## subexpr ##
        "'del'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'del'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'del'", tok)]

    def parsehelper_292(self, node):
        """ ## subexpr ##
        'exprlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_exprlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_290(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'del'", 'exprlist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_291(node) # 'del'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_292(node) # exprlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_del_stmt(self):
        """
        del_stmt: 'del' exprlist
        
        ['del_stmt', ':', GrammarNode('S', ["'del'", 'exprlist'])]
        """
        node = astnode('del_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['del_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_290(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_294(self, node):
        """ ## subexpr ##
        "'pass'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'pass'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'pass'", tok)]

    def parsehelper_293(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'pass'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_294(node) # 'pass'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_pass_stmt(self):
        """
        pass_stmt: 'pass'
        
        ['pass_stmt', ':', GrammarNode('S', ["'pass'"])]
        """
        node = astnode('pass_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['pass_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_293(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_297(self, node):
        """ ## subexpr ##
        'break_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_break_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_296(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['break_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_297(node) # break_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_299(self, node):
        """ ## subexpr ##
        'continue_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_continue_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_298(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['continue_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_299(node) # continue_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_301(self, node):
        """ ## subexpr ##
        'return_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_return_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_300(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['return_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_301(node) # return_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_303(self, node):
        """ ## subexpr ##
        'raise_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_raise_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_302(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['raise_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_303(node) # raise_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_305(self, node):
        """ ## subexpr ##
        'yield_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_yield_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_304(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['yield_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_305(node) # yield_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_295(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['break_stmt']), GrammarNode('S', ['continue_stmt']), GrammarNode('S', ['return_stmt']), GrammarNode('S', ['raise_stmt']), GrammarNode('S', ['yield_stmt'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[15]) and not ('EPS' in TABLE[15]):
            self.pos = oldpos
            return None

        c = self.parsehelper_296(node) # (1, 1, 1), GrammarNode('S', ['break_stmt']) FIRST: frozenset({"'break'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_298(node) # (1, 1, 1), GrammarNode('S', ['continue_stmt']) FIRST: frozenset({"'continue'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_300(node) # (1, 1, 1), GrammarNode('S', ['return_stmt']) FIRST: frozenset({"'return'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_302(node) # (1, 1, 1), GrammarNode('S', ['raise_stmt']) FIRST: frozenset({"'raise'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_304(node) # (1, 1, 1), GrammarNode('S', ['yield_stmt']) FIRST: frozenset({"'yield'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_flow_stmt(self):
        """
        flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt |
        yield_stmt
        
        ['flow_stmt', ':', GrammarNode('A', [GrammarNode('S', ['break_stmt']),
        GrammarNode('S', ['continue_stmt']), GrammarNode('S',
        ['return_stmt']), GrammarNode('S', ['raise_stmt']), GrammarNode('S',
        ['yield_stmt'])])]
        """
        node = astnode('flow_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['flow_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_295(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_307(self, node):
        """ ## subexpr ##
        "'break'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'break'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'break'", tok)]

    def parsehelper_306(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'break'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_307(node) # 'break'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_break_stmt(self):
        """
        break_stmt: 'break'
        
        ['break_stmt', ':', GrammarNode('S', ["'break'"])]
        """
        node = astnode('break_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['break_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_306(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_309(self, node):
        """ ## subexpr ##
        "'continue'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'continue'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'continue'", tok)]

    def parsehelper_308(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'continue'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_309(node) # 'continue'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_continue_stmt(self):
        """
        continue_stmt: 'continue'
        
        ['continue_stmt', ':', GrammarNode('S', ["'continue'"])]
        """
        node = astnode('continue_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['continue_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_308(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_311(self, node):
        """ ## subexpr ##
        "'return'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'return'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'return'", tok)]

    def parsehelper_314(self, node):
        """ ## subexpr ##
        'testlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_313(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_314(node) # testlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_312(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['testlist']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_313(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_310(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'return'", GrammarNode('[', GrammarNode('S', ['testlist']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_311(node) # 'return'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_312(node) # GrammarNode('[', GrammarNode('S', ['testlist']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_return_stmt(self):
        """
        return_stmt: 'return' [testlist]
        
        ['return_stmt', ':', GrammarNode('S', ["'return'", GrammarNode('[',
        GrammarNode('S', ['testlist']))])]
        """
        node = astnode('return_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['return_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_310(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_316(self, node):
        """ ## subexpr ##
        'yield_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_yield_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_315(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['yield_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_316(node) # yield_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_yield_stmt(self):
        """
        yield_stmt: yield_expr
        
        ['yield_stmt', ':', GrammarNode('S', ['yield_expr'])]
        """
        node = astnode('yield_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['yield_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_315(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_318(self, node):
        """ ## subexpr ##
        "'raise'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'raise'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'raise'", tok)]

    def parsehelper_321(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_324(self, node):
        """ ## subexpr ##
        "'from'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'from'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'from'", tok)]

    def parsehelper_325(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_323(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'from'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_324(node) # 'from'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_325(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_322(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'from'", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_323(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_320(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'from'", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_321(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_322(node) # GrammarNode('[', GrammarNode('S', ["'from'", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_319(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'from'", 'test']))]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_320(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_317(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'raise'", GrammarNode('[', GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'from'", 'test']))]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_318(node) # 'raise'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_319(node) # GrammarNode('[', GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'from'", 'test']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_raise_stmt(self):
        """
        raise_stmt: 'raise' [test ['from' test]]
        
        ['raise_stmt', ':', GrammarNode('S', ["'raise'", GrammarNode('[',
        GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'from'",
        'test']))]))])]
        """
        node = astnode('raise_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['raise_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_317(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_328(self, node):
        """ ## subexpr ##
        'import_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_import_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_327(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['import_name'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_328(node) # import_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_330(self, node):
        """ ## subexpr ##
        'import_from'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_import_from()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_329(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['import_from'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_330(node) # import_from
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_326(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['import_name']), GrammarNode('S', ['import_from'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[16]) and not ('EPS' in TABLE[16]):
            self.pos = oldpos
            return None

        c = self.parsehelper_327(node) # (1, 1, 1), GrammarNode('S', ['import_name']) FIRST: frozenset({"'import'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_329(node) # (1, 1, 1), GrammarNode('S', ['import_from']) FIRST: frozenset({"'from'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_import_stmt(self):
        """
        import_stmt: import_name | import_from
        
        ['import_stmt', ':', GrammarNode('A', [GrammarNode('S',
        ['import_name']), GrammarNode('S', ['import_from'])])]
        """
        node = astnode('import_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['import_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_326(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_332(self, node):
        """ ## subexpr ##
        "'import'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'import'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'import'", tok)]

    def parsehelper_333(self, node):
        """ ## subexpr ##
        'dotted_as_names'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_dotted_as_names()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_331(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'import'", 'dotted_as_names'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_332(node) # 'import'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_333(node) # dotted_as_names
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_import_name(self):
        """
        import_name: 'import' dotted_as_names
        
        ['import_name', ':', GrammarNode('S', ["'import'",
        'dotted_as_names'])]
        """
        node = astnode('import_name')
        if self.tok_peek_gstr().isdisjoint(FIRST['import_name']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_331(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_336(self, node):
        """ ## subexpr ##
        "'from'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'from'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'from'", tok)]

    def parsehelper_342(self, node):
        """ ## subexpr ##
        "'.'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOT, '.'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'.'", tok)]

    def parsehelper_341(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'.'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_342(node) # '.'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_344(self, node):
        """ ## subexpr ##
        "'...'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_ELLIPSIS, '...'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'...'", tok)]

    def parsehelper_343(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'...'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_344(node) # '...'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_340(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[17]) and not ('EPS' in TABLE[17]):
            self.pos = oldpos
            return None

        c = self.parsehelper_341(node) # (1, 1, 1), GrammarNode('S', ["'.'"]) FIRST: frozenset({"'.'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_343(node) # (1, 1, 1), GrammarNode('S', ["'...'"]) FIRST: frozenset({"'...'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_339(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_340(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_345(self, node):
        """ ## subexpr ##
        'dotted_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_dotted_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_338(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])), 'dotted_name'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_339(node) # GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_345(node) # dotted_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_350(self, node):
        """ ## subexpr ##
        "'.'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOT, '.'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'.'", tok)]

    def parsehelper_349(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'.'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_350(node) # '.'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_352(self, node):
        """ ## subexpr ##
        "'...'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_ELLIPSIS, '...'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'...'", tok)]

    def parsehelper_351(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'...'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_352(node) # '...'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_348(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[18]) and not ('EPS' in TABLE[18]):
            self.pos = oldpos
            return None

        c = self.parsehelper_349(node) # (1, 1, 1), GrammarNode('S', ["'.'"]) FIRST: frozenset({"'.'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_351(node) # (1, 1, 1), GrammarNode('S', ["'...'"]) FIRST: frozenset({"'...'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_347(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_348(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_346(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_347(node) # GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_337(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])), 'dotted_name']), GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[19]) and not ('EPS' in TABLE[19]):
            self.pos = oldpos
            return None

        c = self.parsehelper_338(node) # (1, 2, 0), GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])), 'dotted_name']) FIRST: frozenset({"'...'", "'.'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_346(node) # (0, 1, 1), GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))]) FIRST: frozenset({"'...'", "'.'", 'EPS'}) INTERSECTION: YES (0, frozenset({"'...'", "'.'"}))
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_353(self, node):
        """ ## subexpr ##
        "'import'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'import'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'import'", tok)]

    def parsehelper_356(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_355(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_356(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_358(self, node):
        """ ## subexpr ##
        "'('"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LPAR, '('):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'('", tok)]

    def parsehelper_359(self, node):
        """ ## subexpr ##
        'import_as_names'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_import_as_names()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_360(self, node):
        """ ## subexpr ##
        "')'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RPAR, ')'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("')'", tok)]

    def parsehelper_357(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'('", 'import_as_names', "')'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_358(node) # '('
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_359(node) # import_as_names
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_360(node) # ')'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_362(self, node):
        """ ## subexpr ##
        'import_as_names'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_import_as_names()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_361(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['import_as_names'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_362(node) # import_as_names
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_354(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'('", 'import_as_names', "')'"]), GrammarNode('S', ['import_as_names'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[20]) and not ('EPS' in TABLE[20]):
            self.pos = oldpos
            return None

        c = self.parsehelper_357(node) # (1, 3, 1), GrammarNode('S', ["'('", 'import_as_names', "')'"]) FIRST: frozenset({"'('"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_355(node) # (1, 1, 1), GrammarNode('S', ["'*'"]) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_361(node) # (1, 1, 0), GrammarNode('S', ['import_as_names']) FIRST: frozenset({'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_335(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'from'", GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])), 'dotted_name']), GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))])]), "'import'", GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'('", 'import_as_names', "')'"]), GrammarNode('S', ['import_as_names'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_336(node) # 'from'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_337(node) # GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])), 'dotted_name']), GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_353(node) # 'import'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_354(node) # GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'('", 'import_as_names', "')'"]), GrammarNode('S', ['import_as_names'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_334(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('S', ["'from'", GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])), 'dotted_name']), GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))])]), "'import'", GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'('", 'import_as_names', "')'"]), GrammarNode('S', ['import_as_names'])])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_335(node) # GrammarNode('S', ["'from'", GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])), 'dotted_name']), GrammarNode('S', [GrammarNode('*', GrammarNode('A', [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))])]), "'import'", GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'('", 'import_as_names', "')'"]), GrammarNode('S', ['import_as_names'])])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_import_from(self):
        """
        import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)
        'import' ('*' | '(' import_as_names ')' | import_as_names))
        
        ['import_from', ':', GrammarNode('S', [GrammarNode('S', ["'from'",
        GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('A',
        [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])])),
        'dotted_name']), GrammarNode('S', [GrammarNode('*', GrammarNode('A',
        [GrammarNode('S', ["'.'"]), GrammarNode('S', ["'...'"])]))])]),
        "'import'", GrammarNode('A', [GrammarNode('S', ["'*'"]),
        GrammarNode('S', ["'('", 'import_as_names', "')'"]), GrammarNode('S',
        ['import_as_names'])])])])]
        """
        node = astnode('import_from')
        if self.tok_peek_gstr().isdisjoint(FIRST['import_from']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_334(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_364(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_367(self, node):
        """ ## subexpr ##
        "'as'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'as'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'as'", tok)]

    def parsehelper_368(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_366(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'as'", 'NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_367(node) # 'as'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_368(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_365(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_366(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_363(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NAME', GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_364(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_365(node) # GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_import_as_name(self):
        """
        import_as_name: NAME ['as' NAME]
        
        ['import_as_name', ':', GrammarNode('S', ['NAME', GrammarNode('[',
        GrammarNode('S', ["'as'", 'NAME']))])]
        """
        node = astnode('import_as_name')
        if self.tok_peek_gstr().isdisjoint(FIRST['import_as_name']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_363(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_370(self, node):
        """ ## subexpr ##
        'dotted_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_dotted_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_373(self, node):
        """ ## subexpr ##
        "'as'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'as'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'as'", tok)]

    def parsehelper_374(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_372(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'as'", 'NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_373(node) # 'as'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_374(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_371(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_372(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_369(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['dotted_name', GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_370(node) # dotted_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_371(node) # GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_dotted_as_name(self):
        """
        dotted_as_name: dotted_name ['as' NAME]
        
        ['dotted_as_name', ':', GrammarNode('S', ['dotted_name',
        GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))])]
        """
        node = astnode('dotted_as_name')
        if self.tok_peek_gstr().isdisjoint(FIRST['dotted_as_name']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_369(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_376(self, node):
        """ ## subexpr ##
        'import_as_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_import_as_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_379(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_380(self, node):
        """ ## subexpr ##
        'import_as_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_import_as_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_378(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'import_as_name'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_379(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_380(node) # import_as_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_377(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'import_as_name']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_378(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_383(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_382(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_383(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_381(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_382(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_375(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['import_as_name', GrammarNode('*', GrammarNode('S', ["','", 'import_as_name'])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_376(node) # import_as_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_377(node) # GrammarNode('*', GrammarNode('S', ["','", 'import_as_name']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_381(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_import_as_names(self):
        """
        import_as_names: import_as_name (',' import_as_name)* [',']
        
        ['import_as_names', ':', GrammarNode('S', ['import_as_name',
        GrammarNode('*', GrammarNode('S', ["','", 'import_as_name'])),
        GrammarNode('[', GrammarNode('S', ["','"]))])]
        """
        node = astnode('import_as_names')
        if self.tok_peek_gstr().isdisjoint(FIRST['import_as_names']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_375(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_385(self, node):
        """ ## subexpr ##
        'dotted_as_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_dotted_as_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_388(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_389(self, node):
        """ ## subexpr ##
        'dotted_as_name'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_dotted_as_name()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_387(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'dotted_as_name'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_388(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_389(node) # dotted_as_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_386(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'dotted_as_name']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_387(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_384(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['dotted_as_name', GrammarNode('*', GrammarNode('S', ["','", 'dotted_as_name']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_385(node) # dotted_as_name
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_386(node) # GrammarNode('*', GrammarNode('S', ["','", 'dotted_as_name']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_dotted_as_names(self):
        """
        dotted_as_names: dotted_as_name (',' dotted_as_name)*
        
        ['dotted_as_names', ':', GrammarNode('S', ['dotted_as_name',
        GrammarNode('*', GrammarNode('S', ["','", 'dotted_as_name']))])]
        """
        node = astnode('dotted_as_names')
        if self.tok_peek_gstr().isdisjoint(FIRST['dotted_as_names']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_384(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_391(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_394(self, node):
        """ ## subexpr ##
        "'.'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOT, '.'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'.'", tok)]

    def parsehelper_395(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_393(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'.'", 'NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_394(node) # '.'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_395(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_392(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'.'", 'NAME']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_393(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_390(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NAME', GrammarNode('*', GrammarNode('S', ["'.'", 'NAME']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_391(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_392(node) # GrammarNode('*', GrammarNode('S', ["'.'", 'NAME']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_dotted_name(self):
        """
        dotted_name: NAME ('.' NAME)*
        
        ['dotted_name', ':', GrammarNode('S', ['NAME', GrammarNode('*',
        GrammarNode('S', ["'.'", 'NAME']))])]
        """
        node = astnode('dotted_name')
        if self.tok_peek_gstr().isdisjoint(FIRST['dotted_name']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_390(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_397(self, node):
        """ ## subexpr ##
        "'global'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'global'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'global'", tok)]

    def parsehelper_398(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_401(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_402(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_400(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_401(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_402(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_399(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'NAME']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_400(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_396(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'global'", 'NAME', GrammarNode('*', GrammarNode('S', ["','", 'NAME']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_397(node) # 'global'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_398(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_399(node) # GrammarNode('*', GrammarNode('S', ["','", 'NAME']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_global_stmt(self):
        """
        global_stmt: 'global' NAME (',' NAME)*
        
        ['global_stmt', ':', GrammarNode('S', ["'global'", 'NAME',
        GrammarNode('*', GrammarNode('S', ["','", 'NAME']))])]
        """
        node = astnode('global_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['global_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_396(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_404(self, node):
        """ ## subexpr ##
        "'nonlocal'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'nonlocal'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'nonlocal'", tok)]

    def parsehelper_405(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_408(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_409(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_407(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_408(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_409(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_406(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'NAME']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_407(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_403(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'nonlocal'", 'NAME', GrammarNode('*', GrammarNode('S', ["','", 'NAME']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_404(node) # 'nonlocal'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_405(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_406(node) # GrammarNode('*', GrammarNode('S', ["','", 'NAME']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_nonlocal_stmt(self):
        """
        nonlocal_stmt: 'nonlocal' NAME (',' NAME)*
        
        ['nonlocal_stmt', ':', GrammarNode('S', ["'nonlocal'", 'NAME',
        GrammarNode('*', GrammarNode('S', ["','", 'NAME']))])]
        """
        node = astnode('nonlocal_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['nonlocal_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_403(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_411(self, node):
        """ ## subexpr ##
        "'assert'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'assert'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'assert'", tok)]

    def parsehelper_412(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_415(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_416(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_414(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_415(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_416(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_413(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_414(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_410(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'assert'", 'test', GrammarNode('[', GrammarNode('S', ["','", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_411(node) # 'assert'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_412(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_413(node) # GrammarNode('[', GrammarNode('S', ["','", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_assert_stmt(self):
        """
        assert_stmt: 'assert' test [',' test]
        
        ['assert_stmt', ':', GrammarNode('S', ["'assert'", 'test',
        GrammarNode('[', GrammarNode('S', ["','", 'test']))])]
        """
        node = astnode('assert_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['assert_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_410(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_419(self, node):
        """ ## subexpr ##
        'if_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_if_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_418(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['if_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_419(node) # if_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_421(self, node):
        """ ## subexpr ##
        'while_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_while_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_420(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['while_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_421(node) # while_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_423(self, node):
        """ ## subexpr ##
        'for_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_for_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_422(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['for_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_423(node) # for_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_425(self, node):
        """ ## subexpr ##
        'try_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_try_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_424(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['try_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_425(node) # try_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_427(self, node):
        """ ## subexpr ##
        'with_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_with_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_426(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['with_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_427(node) # with_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_429(self, node):
        """ ## subexpr ##
        'funcdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_funcdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_428(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['funcdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_429(node) # funcdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_431(self, node):
        """ ## subexpr ##
        'classdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_classdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_430(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['classdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_431(node) # classdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_433(self, node):
        """ ## subexpr ##
        'decorated'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_decorated()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_432(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['decorated'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_433(node) # decorated
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_417(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['if_stmt']), GrammarNode('S', ['while_stmt']), GrammarNode('S', ['for_stmt']), GrammarNode('S', ['try_stmt']), GrammarNode('S', ['with_stmt']), GrammarNode('S', ['funcdef']), GrammarNode('S', ['classdef']), GrammarNode('S', ['decorated'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[21]) and not ('EPS' in TABLE[21]):
            self.pos = oldpos
            return None

        c = self.parsehelper_418(node) # (1, 1, 1), GrammarNode('S', ['if_stmt']) FIRST: frozenset({"'if'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_420(node) # (1, 1, 1), GrammarNode('S', ['while_stmt']) FIRST: frozenset({"'while'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_422(node) # (1, 1, 1), GrammarNode('S', ['for_stmt']) FIRST: frozenset({"'for'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_424(node) # (1, 1, 1), GrammarNode('S', ['try_stmt']) FIRST: frozenset({"'try'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_426(node) # (1, 1, 1), GrammarNode('S', ['with_stmt']) FIRST: frozenset({"'with'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_428(node) # (1, 1, 1), GrammarNode('S', ['funcdef']) FIRST: frozenset({"'def'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_430(node) # (1, 1, 1), GrammarNode('S', ['classdef']) FIRST: frozenset({"'class'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_432(node) # (1, 1, 1), GrammarNode('S', ['decorated']) FIRST: frozenset({"'@'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_compound_stmt(self):
        """
        compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt
        | funcdef | classdef | decorated
        
        ['compound_stmt', ':', GrammarNode('A', [GrammarNode('S',
        ['if_stmt']), GrammarNode('S', ['while_stmt']), GrammarNode('S',
        ['for_stmt']), GrammarNode('S', ['try_stmt']), GrammarNode('S',
        ['with_stmt']), GrammarNode('S', ['funcdef']), GrammarNode('S',
        ['classdef']), GrammarNode('S', ['decorated'])])]
        """
        node = astnode('compound_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['compound_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_417(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_435(self, node):
        """ ## subexpr ##
        "'if'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'if'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'if'", tok)]

    def parsehelper_436(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_437(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_438(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_441(self, node):
        """ ## subexpr ##
        "'elif'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'elif'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'elif'", tok)]

    def parsehelper_442(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_443(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_444(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_440(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'elif'", 'test', "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_441(node) # 'elif'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_442(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_443(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_444(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_439(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'elif'", 'test', "':'", 'suite']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_440(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_447(self, node):
        """ ## subexpr ##
        "'else'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'else'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'else'", tok)]

    def parsehelper_448(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_449(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_446(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'else'", "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_447(node) # 'else'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_448(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_449(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_445(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_446(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_434(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'if'", 'test', "':'", 'suite', GrammarNode('*', GrammarNode('S', ["'elif'", 'test', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_435(node) # 'if'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_436(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_437(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_438(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_439(node) # GrammarNode('*', GrammarNode('S', ["'elif'", 'test', "':'", 'suite']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_445(node) # GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_if_stmt(self):
        """
        if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':'
        suite]
        
        ['if_stmt', ':', GrammarNode('S', ["'if'", 'test', "':'", 'suite',
        GrammarNode('*', GrammarNode('S', ["'elif'", 'test', "':'",
        'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'",
        'suite']))])]
        """
        node = astnode('if_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['if_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_434(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_451(self, node):
        """ ## subexpr ##
        "'while'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'while'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'while'", tok)]

    def parsehelper_452(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_453(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_454(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_457(self, node):
        """ ## subexpr ##
        "'else'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'else'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'else'", tok)]

    def parsehelper_458(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_459(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_456(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'else'", "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_457(node) # 'else'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_458(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_459(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_455(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_456(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_450(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'while'", 'test', "':'", 'suite', GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_451(node) # 'while'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_452(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_453(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_454(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_455(node) # GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_while_stmt(self):
        """
        while_stmt: 'while' test ':' suite ['else' ':' suite]
        
        ['while_stmt', ':', GrammarNode('S', ["'while'", 'test', "':'",
        'suite', GrammarNode('[', GrammarNode('S', ["'else'", "':'",
        'suite']))])]
        """
        node = astnode('while_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['while_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_450(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_461(self, node):
        """ ## subexpr ##
        "'for'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'for'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'for'", tok)]

    def parsehelper_462(self, node):
        """ ## subexpr ##
        'exprlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_exprlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_463(self, node):
        """ ## subexpr ##
        "'in'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'in'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'in'", tok)]

    def parsehelper_464(self, node):
        """ ## subexpr ##
        'testlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_465(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_466(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_469(self, node):
        """ ## subexpr ##
        "'else'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'else'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'else'", tok)]

    def parsehelper_470(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_471(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_468(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'else'", "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_469(node) # 'else'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_470(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_471(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_467(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_468(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_460(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'for'", 'exprlist', "'in'", 'testlist', "':'", 'suite', GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_461(node) # 'for'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_462(node) # exprlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_463(node) # 'in'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_464(node) # testlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_465(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_466(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_467(node) # GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_for_stmt(self):
        """
        for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
        
        ['for_stmt', ':', GrammarNode('S', ["'for'", 'exprlist', "'in'",
        'testlist', "':'", 'suite', GrammarNode('[', GrammarNode('S',
        ["'else'", "':'", 'suite']))])]
        """
        node = astnode('for_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['for_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_460(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_474(self, node):
        """ ## subexpr ##
        "'try'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'try'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'try'", tok)]

    def parsehelper_475(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_476(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_481(self, node):
        """ ## subexpr ##
        'except_clause'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_except_clause()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_482(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_483(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_480(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['except_clause', "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_481(node) # except_clause
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_482(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_483(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_479(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_480(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_486(self, node):
        """ ## subexpr ##
        "'else'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'else'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'else'", tok)]

    def parsehelper_487(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_488(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_485(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'else'", "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_486(node) # 'else'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_487(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_488(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_484(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_485(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_491(self, node):
        """ ## subexpr ##
        "'finally'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'finally'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'finally'", tok)]

    def parsehelper_492(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_493(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_490(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'finally'", "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_491(node) # 'finally'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_492(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_493(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_489(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_490(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_478(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_479(node) # GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_484(node) # GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_489(node) # GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_495(self, node):
        """ ## subexpr ##
        "'finally'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'finally'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'finally'", tok)]

    def parsehelper_496(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_497(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_494(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'finally'", "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_495(node) # 'finally'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_496(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_497(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_477(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))]), GrammarNode('S', ["'finally'", "':'", 'suite'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[22]) and not ('EPS' in TABLE[22]):
            self.pos = oldpos
            return None

        c = self.parsehelper_494(node) # (1, 3, 1), GrammarNode('S', ["'finally'", "':'", 'suite']) FIRST: frozenset({"'finally'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_478(node) # (0, 3, 1), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))]) FIRST: frozenset({"'else'", 'EPS', "'finally'", "'except'"}) INTERSECTION: YES (0, frozenset({"'finally'"}))
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_473(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'try'", "':'", 'suite', GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))]), GrammarNode('S', ["'finally'", "':'", 'suite'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_474(node) # 'try'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_475(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_476(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_477(node) # GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))]), GrammarNode('S', ["'finally'", "':'", 'suite'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_472(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('S', ["'try'", "':'", 'suite', GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))]), GrammarNode('S', ["'finally'", "':'", 'suite'])])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_473(node) # GrammarNode('S', ["'try'", "':'", 'suite', GrammarNode('A', [GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[', GrammarNode('S', ["'finally'", "':'", 'suite']))]), GrammarNode('S', ["'finally'", "':'", 'suite'])])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_try_stmt(self):
        """
        try_stmt: ('try' ':' suite ((except_clause ':' suite)+ ['else' ':'
        suite] ['finally' ':' suite] | 'finally' ':' suite))
        
        ['try_stmt', ':', GrammarNode('S', [GrammarNode('S', ["'try'", "':'",
        'suite', GrammarNode('A', [GrammarNode('S', [GrammarNode('*',
        GrammarNode('S', ['except_clause', "':'", 'suite'])), GrammarNode('[',
        GrammarNode('S', ["'else'", "':'", 'suite'])), GrammarNode('[',
        GrammarNode('S', ["'finally'", "':'", 'suite']))]), GrammarNode('S',
        ["'finally'", "':'", 'suite'])])])])]
        """
        node = astnode('try_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['try_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_472(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_499(self, node):
        """ ## subexpr ##
        "'with'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'with'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'with'", tok)]

    def parsehelper_500(self, node):
        """ ## subexpr ##
        'with_item'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_with_item()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_503(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_504(self, node):
        """ ## subexpr ##
        'with_item'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_with_item()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_502(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'with_item'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_503(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_504(node) # with_item
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_501(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'with_item']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_502(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_505(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_506(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_498(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'with'", 'with_item', GrammarNode('*', GrammarNode('S', ["','", 'with_item'])), "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_499(node) # 'with'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_500(node) # with_item
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_501(node) # GrammarNode('*', GrammarNode('S', ["','", 'with_item']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_505(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_506(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_with_stmt(self):
        """
        with_stmt: 'with' with_item (',' with_item)*  ':' suite
        
        ['with_stmt', ':', GrammarNode('S', ["'with'", 'with_item',
        GrammarNode('*', GrammarNode('S', ["','", 'with_item'])), "':'",
        'suite'])]
        """
        node = astnode('with_stmt')
        if self.tok_peek_gstr().isdisjoint(FIRST['with_stmt']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_498(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_508(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_511(self, node):
        """ ## subexpr ##
        "'as'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'as'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'as'", tok)]

    def parsehelper_512(self, node):
        """ ## subexpr ##
        'expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_510(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'as'", 'expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_511(node) # 'as'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_512(node) # expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_509(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'as'", 'expr']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_510(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_507(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'as'", 'expr']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_508(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_509(node) # GrammarNode('[', GrammarNode('S', ["'as'", 'expr']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_with_item(self):
        """
        with_item: test ['as' expr]
        
        ['with_item', ':', GrammarNode('S', ['test', GrammarNode('[',
        GrammarNode('S', ["'as'", 'expr']))])]
        """
        node = astnode('with_item')
        if self.tok_peek_gstr().isdisjoint(FIRST['with_item']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_507(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_514(self, node):
        """ ## subexpr ##
        "'except'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'except'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'except'", tok)]

    def parsehelper_517(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_520(self, node):
        """ ## subexpr ##
        "'as'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'as'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'as'", tok)]

    def parsehelper_521(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_519(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'as'", 'NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_520(node) # 'as'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_521(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_518(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_519(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_516(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_517(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_518(node) # GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_515(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_516(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_513(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'except'", GrammarNode('[', GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_514(node) # 'except'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_515(node) # GrammarNode('[', GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'as'", 'NAME']))]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_except_clause(self):
        """
        except_clause: 'except' [test ['as' NAME]]
        
        ['except_clause', ':', GrammarNode('S', ["'except'", GrammarNode('[',
        GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ["'as'",
        'NAME']))]))])]
        """
        node = astnode('except_clause')
        if self.tok_peek_gstr().isdisjoint(FIRST['except_clause']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_513(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_524(self, node):
        """ ## subexpr ##
        'simple_stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_simple_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_523(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['simple_stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_524(node) # simple_stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_526(self, node):
        """ ## subexpr ##
        'NEWLINE'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NEWLINE):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NEWLINE', tok)]

    def parsehelper_527(self, node):
        """ ## subexpr ##
        'INDENT'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_INDENT):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('INDENT', tok)]

    def parsehelper_530(self, node):
        """ ## subexpr ##
        'stmt'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_stmt()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_529(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['stmt'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_530(node) # stmt
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_528(self, node):
        """ ## subexpr ##
        GrammarNode('+', GrammarNode('S', ['stmt']))
        """
        oldpos = self.pos
        #

        # +-type (1+)
        childs = []
        i = 0
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_529(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
            i = i + 1
        if i == 0:
            self.pos = oldpos
            return None
        return childs

    def parsehelper_531(self, node):
        """ ## subexpr ##
        'DEDENT'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_DEDENT):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('DEDENT', tok)]

    def parsehelper_525(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NEWLINE', 'INDENT', GrammarNode('+', GrammarNode('S', ['stmt'])), 'DEDENT'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_526(node) # NEWLINE
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_527(node) # INDENT
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_528(node) # GrammarNode('+', GrammarNode('S', ['stmt']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_531(node) # DEDENT
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_522(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['simple_stmt']), GrammarNode('S', ['NEWLINE', 'INDENT', GrammarNode('+', GrammarNode('S', ['stmt'])), 'DEDENT'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[23]) and not ('EPS' in TABLE[23]):
            self.pos = oldpos
            return None

        c = self.parsehelper_525(node) # (1, 4, 1), GrammarNode('S', ['NEWLINE', 'INDENT', GrammarNode('+', GrammarNode('S', ['stmt'])), 'DEDENT']) FIRST: frozenset({'NEWLINE'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_523(node) # (1, 1, 0), GrammarNode('S', ['simple_stmt']) FIRST: frozenset({"'raise'", "'True'", "'~'", "'not'", "'None'", 'NUMBER', "'{'", "'lambda'", "'*'", "'nonlocal'", "'...'", 'STRING', "'return'", "'assert'", 'NAME', "'global'", "'False'", "'pass'", "'import'", "'-'", "'yield'", "'del'", "'('", "'from'", "'['", "'break'", "'continue'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_suite(self):
        """
        suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
        
        ['suite', ':', GrammarNode('A', [GrammarNode('S', ['simple_stmt']),
        GrammarNode('S', ['NEWLINE', 'INDENT', GrammarNode('+',
        GrammarNode('S', ['stmt'])), 'DEDENT'])])]
        """
        node = astnode('suite')
        if self.tok_peek_gstr().isdisjoint(FIRST['suite']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_522(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_534(self, node):
        """ ## subexpr ##
        'or_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_or_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_537(self, node):
        """ ## subexpr ##
        "'if'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'if'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'if'", tok)]

    def parsehelper_538(self, node):
        """ ## subexpr ##
        'or_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_or_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_539(self, node):
        """ ## subexpr ##
        "'else'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'else'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'else'", tok)]

    def parsehelper_540(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_536(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'if'", 'or_test', "'else'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_537(node) # 'if'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_538(node) # or_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_539(node) # 'else'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_540(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_535(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'if'", 'or_test', "'else'", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_536(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_533(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['or_test', GrammarNode('[', GrammarNode('S', ["'if'", 'or_test', "'else'", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_534(node) # or_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_535(node) # GrammarNode('[', GrammarNode('S', ["'if'", 'or_test', "'else'", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_542(self, node):
        """ ## subexpr ##
        'lambdef'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_lambdef()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_541(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['lambdef'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_542(node) # lambdef
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_532(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['or_test', GrammarNode('[', GrammarNode('S', ["'if'", 'or_test', "'else'", 'test']))]), GrammarNode('S', ['lambdef'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[24]) and not ('EPS' in TABLE[24]):
            self.pos = oldpos
            return None

        c = self.parsehelper_533(node) # (1, 4, 0), GrammarNode('S', ['or_test', GrammarNode('[', GrammarNode('S', ["'if'", 'or_test', "'else'", 'test']))]) FIRST: frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'...'", "'+'", 'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_541(node) # (1, 1, 1), GrammarNode('S', ['lambdef']) FIRST: frozenset({"'lambda'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_test(self):
        """
        test: or_test ['if' or_test 'else' test] | lambdef
        
        ['test', ':', GrammarNode('A', [GrammarNode('S', ['or_test',
        GrammarNode('[', GrammarNode('S', ["'if'", 'or_test', "'else'",
        'test']))]), GrammarNode('S', ['lambdef'])])]
        """
        node = astnode('test')
        if self.tok_peek_gstr().isdisjoint(FIRST['test']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_532(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_545(self, node):
        """ ## subexpr ##
        'or_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_or_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_544(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['or_test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_545(node) # or_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_547(self, node):
        """ ## subexpr ##
        'lambdef_nocond'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_lambdef_nocond()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_546(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['lambdef_nocond'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_547(node) # lambdef_nocond
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_543(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['or_test']), GrammarNode('S', ['lambdef_nocond'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[25]) and not ('EPS' in TABLE[25]):
            self.pos = oldpos
            return None

        c = self.parsehelper_546(node) # (1, 1, 1), GrammarNode('S', ['lambdef_nocond']) FIRST: frozenset({"'lambda'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_544(node) # (1, 1, 0), GrammarNode('S', ['or_test']) FIRST: frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'...'", "'+'", 'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_test_nocond(self):
        """
        test_nocond: or_test | lambdef_nocond
        
        ['test_nocond', ':', GrammarNode('A', [GrammarNode('S', ['or_test']),
        GrammarNode('S', ['lambdef_nocond'])])]
        """
        node = astnode('test_nocond')
        if self.tok_peek_gstr().isdisjoint(FIRST['test_nocond']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_543(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_549(self, node):
        """ ## subexpr ##
        "'lambda'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'lambda'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'lambda'", tok)]

    def parsehelper_552(self, node):
        """ ## subexpr ##
        'varargslist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_varargslist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_551(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['varargslist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_552(node) # varargslist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_550(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['varargslist']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_551(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_553(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_554(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_548(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'lambda'", GrammarNode('[', GrammarNode('S', ['varargslist'])), "':'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_549(node) # 'lambda'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_550(node) # GrammarNode('[', GrammarNode('S', ['varargslist']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_553(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_554(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_lambdef(self):
        """
        lambdef: 'lambda' [varargslist] ':' test
        
        ['lambdef', ':', GrammarNode('S', ["'lambda'", GrammarNode('[',
        GrammarNode('S', ['varargslist'])), "':'", 'test'])]
        """
        node = astnode('lambdef')
        if self.tok_peek_gstr().isdisjoint(FIRST['lambdef']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_548(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_556(self, node):
        """ ## subexpr ##
        "'lambda'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'lambda'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'lambda'", tok)]

    def parsehelper_559(self, node):
        """ ## subexpr ##
        'varargslist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_varargslist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_558(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['varargslist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_559(node) # varargslist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_557(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['varargslist']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_558(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_560(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_561(self, node):
        """ ## subexpr ##
        'test_nocond'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test_nocond()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_555(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'lambda'", GrammarNode('[', GrammarNode('S', ['varargslist'])), "':'", 'test_nocond'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_556(node) # 'lambda'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_557(node) # GrammarNode('[', GrammarNode('S', ['varargslist']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_560(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_561(node) # test_nocond
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_lambdef_nocond(self):
        """
        lambdef_nocond: 'lambda' [varargslist] ':' test_nocond
        
        ['lambdef_nocond', ':', GrammarNode('S', ["'lambda'", GrammarNode('[',
        GrammarNode('S', ['varargslist'])), "':'", 'test_nocond'])]
        """
        node = astnode('lambdef_nocond')
        if self.tok_peek_gstr().isdisjoint(FIRST['lambdef_nocond']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_555(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_563(self, node):
        """ ## subexpr ##
        'and_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_and_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_566(self, node):
        """ ## subexpr ##
        "'or'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'or'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'or'", tok)]

    def parsehelper_567(self, node):
        """ ## subexpr ##
        'and_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_and_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_565(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'or'", 'and_test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_566(node) # 'or'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_567(node) # and_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_564(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'or'", 'and_test']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_565(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_562(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['and_test', GrammarNode('*', GrammarNode('S', ["'or'", 'and_test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_563(node) # and_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_564(node) # GrammarNode('*', GrammarNode('S', ["'or'", 'and_test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_or_test(self):
        """
        or_test: and_test ('or' and_test)*
        
        ['or_test', ':', GrammarNode('S', ['and_test', GrammarNode('*',
        GrammarNode('S', ["'or'", 'and_test']))])]
        """
        node = astnode('or_test')
        if self.tok_peek_gstr().isdisjoint(FIRST['or_test']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_562(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_569(self, node):
        """ ## subexpr ##
        'not_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_not_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_572(self, node):
        """ ## subexpr ##
        "'and'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'and'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'and'", tok)]

    def parsehelper_573(self, node):
        """ ## subexpr ##
        'not_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_not_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_571(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'and'", 'not_test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_572(node) # 'and'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_573(node) # not_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_570(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'and'", 'not_test']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_571(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_568(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['not_test', GrammarNode('*', GrammarNode('S', ["'and'", 'not_test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_569(node) # not_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_570(node) # GrammarNode('*', GrammarNode('S', ["'and'", 'not_test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_and_test(self):
        """
        and_test: not_test ('and' not_test)*
        
        ['and_test', ':', GrammarNode('S', ['not_test', GrammarNode('*',
        GrammarNode('S', ["'and'", 'not_test']))])]
        """
        node = astnode('and_test')
        if self.tok_peek_gstr().isdisjoint(FIRST['and_test']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_568(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_576(self, node):
        """ ## subexpr ##
        "'not'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'not'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'not'", tok)]

    def parsehelper_577(self, node):
        """ ## subexpr ##
        'not_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_not_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_575(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'not'", 'not_test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_576(node) # 'not'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_577(node) # not_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_579(self, node):
        """ ## subexpr ##
        'comparison'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comparison()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_578(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comparison'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_579(node) # comparison
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_574(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'not'", 'not_test']), GrammarNode('S', ['comparison'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[26]) and not ('EPS' in TABLE[26]):
            self.pos = oldpos
            return None

        c = self.parsehelper_575(node) # (1, 2, 1), GrammarNode('S', ["'not'", 'not_test']) FIRST: frozenset({"'not'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_578(node) # (1, 1, 0), GrammarNode('S', ['comparison']) FIRST: frozenset({"'True'", "'~'", 'NAME', "'False'", "'None'", "'-'", 'NUMBER', "'{'", "'('", "'['", "'...'", "'+'", 'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_not_test(self):
        """
        not_test: 'not' not_test | comparison
        
        ['not_test', ':', GrammarNode('A', [GrammarNode('S', ["'not'",
        'not_test']), GrammarNode('S', ['comparison'])])]
        """
        node = astnode('not_test')
        if self.tok_peek_gstr().isdisjoint(FIRST['not_test']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_574(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_581(self, node):
        """ ## subexpr ##
        'expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_584(self, node):
        """ ## subexpr ##
        'comp_op'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_op()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_585(self, node):
        """ ## subexpr ##
        'expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_583(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_op', 'expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_584(node) # comp_op
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_585(node) # expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_582(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ['comp_op', 'expr']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_583(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_580(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['expr', GrammarNode('*', GrammarNode('S', ['comp_op', 'expr']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_581(node) # expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_582(node) # GrammarNode('*', GrammarNode('S', ['comp_op', 'expr']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_comparison(self):
        """
        comparison: expr (comp_op expr)*
        
        ['comparison', ':', GrammarNode('S', ['expr', GrammarNode('*',
        GrammarNode('S', ['comp_op', 'expr']))])]
        """
        node = astnode('comparison')
        if self.tok_peek_gstr().isdisjoint(FIRST['comparison']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_580(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_588(self, node):
        """ ## subexpr ##
        "'<'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LESS, '<'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'<'", tok)]

    def parsehelper_587(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'<'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_588(node) # '<'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_590(self, node):
        """ ## subexpr ##
        "'>'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_GREATER, '>'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'>'", tok)]

    def parsehelper_589(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'>'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_590(node) # '>'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_592(self, node):
        """ ## subexpr ##
        "'=='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQEQUAL, '=='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'=='", tok)]

    def parsehelper_591(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'=='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_592(node) # '=='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_594(self, node):
        """ ## subexpr ##
        "'>='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_GREATEREQUAL, '>='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'>='", tok)]

    def parsehelper_593(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'>='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_594(node) # '>='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_596(self, node):
        """ ## subexpr ##
        "'<='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LESSEQUAL, '<='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'<='", tok)]

    def parsehelper_595(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'<='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_596(node) # '<='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_598(self, node):
        """ ## subexpr ##
        "'<>'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_NOTEQUAL, '<>'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'<>'", tok)]

    def parsehelper_597(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'<>'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_598(node) # '<>'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_600(self, node):
        """ ## subexpr ##
        "'!='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_NOTEQUAL, '!='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'!='", tok)]

    def parsehelper_599(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'!='"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_600(node) # '!='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_602(self, node):
        """ ## subexpr ##
        "'in'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'in'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'in'", tok)]

    def parsehelper_601(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'in'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_602(node) # 'in'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_604(self, node):
        """ ## subexpr ##
        "'not'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'not'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'not'", tok)]

    def parsehelper_605(self, node):
        """ ## subexpr ##
        "'in'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'in'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'in'", tok)]

    def parsehelper_603(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'not'", "'in'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_604(node) # 'not'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_605(node) # 'in'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_607(self, node):
        """ ## subexpr ##
        "'is'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'is'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'is'", tok)]

    def parsehelper_606(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'is'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_607(node) # 'is'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_609(self, node):
        """ ## subexpr ##
        "'is'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'is'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'is'", tok)]

    def parsehelper_610(self, node):
        """ ## subexpr ##
        "'not'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'not'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'not'", tok)]

    def parsehelper_608(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'is'", "'not'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_609(node) # 'is'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_610(node) # 'not'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_586(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'<'"]), GrammarNode('S', ["'>'"]), GrammarNode('S', ["'=='"]), GrammarNode('S', ["'>='"]), GrammarNode('S', ["'<='"]), GrammarNode('S', ["'<>'"]), GrammarNode('S', ["'!='"]), GrammarNode('S', ["'in'"]), GrammarNode('S', ["'not'", "'in'"]), GrammarNode('S', ["'is'"]), GrammarNode('S', ["'is'", "'not'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[27]) and not ('EPS' in TABLE[27]):
            self.pos = oldpos
            return None

        c = self.parsehelper_603(node) # (1, 2, 1), GrammarNode('S', ["'not'", "'in'"]) FIRST: frozenset({"'not'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_608(node) # (1, 2, 1), GrammarNode('S', ["'is'", "'not'"]) FIRST: frozenset({"'is'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_587(node) # (1, 1, 1), GrammarNode('S', ["'<'"]) FIRST: frozenset({"'<'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_589(node) # (1, 1, 1), GrammarNode('S', ["'>'"]) FIRST: frozenset({"'>'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_591(node) # (1, 1, 1), GrammarNode('S', ["'=='"]) FIRST: frozenset({"'=='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_593(node) # (1, 1, 1), GrammarNode('S', ["'>='"]) FIRST: frozenset({"'>='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_595(node) # (1, 1, 1), GrammarNode('S', ["'<='"]) FIRST: frozenset({"'<='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_597(node) # (1, 1, 1), GrammarNode('S', ["'<>'"]) FIRST: frozenset({"'<>'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_599(node) # (1, 1, 1), GrammarNode('S', ["'!='"]) FIRST: frozenset({"'!='"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_601(node) # (1, 1, 1), GrammarNode('S', ["'in'"]) FIRST: frozenset({"'in'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_606(node) # (1, 1, 1), GrammarNode('S', ["'is'"]) FIRST: frozenset({"'is'"}) INTERSECTION: YES (1, frozenset({"'is'"}))
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_comp_op(self):
        """
        comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is'
        'not'
        
        ['comp_op', ':', GrammarNode('A', [GrammarNode('S', ["'<'"]),
        GrammarNode('S', ["'>'"]), GrammarNode('S', ["'=='"]),
        GrammarNode('S', ["'>='"]), GrammarNode('S', ["'<='"]),
        GrammarNode('S', ["'<>'"]), GrammarNode('S', ["'!='"]),
        GrammarNode('S', ["'in'"]), GrammarNode('S', ["'not'", "'in'"]),
        GrammarNode('S', ["'is'"]), GrammarNode('S', ["'is'", "'not'"])])]
        """
        node = astnode('comp_op')
        if self.tok_peek_gstr().isdisjoint(FIRST['comp_op']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_586(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_612(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_613(self, node):
        """ ## subexpr ##
        'expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_611(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'", 'expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_612(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_613(node) # expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_star_expr(self):
        """
        star_expr: '*' expr
        
        ['star_expr', ':', GrammarNode('S', ["'*'", 'expr'])]
        """
        node = astnode('star_expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['star_expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_611(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_615(self, node):
        """ ## subexpr ##
        'xor_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_xor_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_618(self, node):
        """ ## subexpr ##
        "'|'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_VBAR, '|'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'|'", tok)]

    def parsehelper_619(self, node):
        """ ## subexpr ##
        'xor_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_xor_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_617(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'|'", 'xor_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_618(node) # '|'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_619(node) # xor_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_616(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'|'", 'xor_expr']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_617(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_614(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['xor_expr', GrammarNode('*', GrammarNode('S', ["'|'", 'xor_expr']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_615(node) # xor_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_616(node) # GrammarNode('*', GrammarNode('S', ["'|'", 'xor_expr']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_expr(self):
        """
        expr: xor_expr ('|' xor_expr)*
        
        ['expr', ':', GrammarNode('S', ['xor_expr', GrammarNode('*',
        GrammarNode('S', ["'|'", 'xor_expr']))])]
        """
        node = astnode('expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_614(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_621(self, node):
        """ ## subexpr ##
        'and_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_and_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_624(self, node):
        """ ## subexpr ##
        "'^'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_CIRCUMFLEX, '^'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'^'", tok)]

    def parsehelper_625(self, node):
        """ ## subexpr ##
        'and_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_and_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_623(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'^'", 'and_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_624(node) # '^'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_625(node) # and_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_622(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'^'", 'and_expr']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_623(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_620(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['and_expr', GrammarNode('*', GrammarNode('S', ["'^'", 'and_expr']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_621(node) # and_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_622(node) # GrammarNode('*', GrammarNode('S', ["'^'", 'and_expr']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_xor_expr(self):
        """
        xor_expr: and_expr ('^' and_expr)*
        
        ['xor_expr', ':', GrammarNode('S', ['and_expr', GrammarNode('*',
        GrammarNode('S', ["'^'", 'and_expr']))])]
        """
        node = astnode('xor_expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['xor_expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_620(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_627(self, node):
        """ ## subexpr ##
        'shift_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_shift_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_630(self, node):
        """ ## subexpr ##
        "'&'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_AMPER, '&'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'&'", tok)]

    def parsehelper_631(self, node):
        """ ## subexpr ##
        'shift_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_shift_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_629(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'&'", 'shift_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_630(node) # '&'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_631(node) # shift_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_628(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["'&'", 'shift_expr']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_629(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_626(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['shift_expr', GrammarNode('*', GrammarNode('S', ["'&'", 'shift_expr']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_627(node) # shift_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_628(node) # GrammarNode('*', GrammarNode('S', ["'&'", 'shift_expr']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_and_expr(self):
        """
        and_expr: shift_expr ('&' shift_expr)*
        
        ['and_expr', ':', GrammarNode('S', ['shift_expr', GrammarNode('*',
        GrammarNode('S', ["'&'", 'shift_expr']))])]
        """
        node = astnode('and_expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['and_expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_626(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_633(self, node):
        """ ## subexpr ##
        'arith_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_arith_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_638(self, node):
        """ ## subexpr ##
        "'<<'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LEFTSHIFT, '<<'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'<<'", tok)]

    def parsehelper_637(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'<<'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_638(node) # '<<'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_640(self, node):
        """ ## subexpr ##
        "'>>'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RIGHTSHIFT, '>>'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'>>'", tok)]

    def parsehelper_639(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'>>'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_640(node) # '>>'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_636(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'<<'"]), GrammarNode('S', ["'>>'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[28]) and not ('EPS' in TABLE[28]):
            self.pos = oldpos
            return None

        c = self.parsehelper_637(node) # (1, 1, 1), GrammarNode('S', ["'<<'"]) FIRST: frozenset({"'<<'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_639(node) # (1, 1, 1), GrammarNode('S', ["'>>'"]) FIRST: frozenset({"'>>'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_641(self, node):
        """ ## subexpr ##
        'arith_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_arith_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_635(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'<<'"]), GrammarNode('S', ["'>>'"])]), 'arith_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_636(node) # GrammarNode('A', [GrammarNode('S', ["'<<'"]), GrammarNode('S', ["'>>'"])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_641(node) # arith_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_634(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'<<'"]), GrammarNode('S', ["'>>'"])]), 'arith_expr']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_635(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_632(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['arith_expr', GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'<<'"]), GrammarNode('S', ["'>>'"])]), 'arith_expr']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_633(node) # arith_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_634(node) # GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'<<'"]), GrammarNode('S', ["'>>'"])]), 'arith_expr']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_shift_expr(self):
        """
        shift_expr: arith_expr (('<<'|'>>') arith_expr)*
        
        ['shift_expr', ':', GrammarNode('S', ['arith_expr', GrammarNode('*',
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'<<'"]),
        GrammarNode('S', ["'>>'"])]), 'arith_expr']))])]
        """
        node = astnode('shift_expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['shift_expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_632(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_643(self, node):
        """ ## subexpr ##
        'term'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_term()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_648(self, node):
        """ ## subexpr ##
        "'+'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_PLUS, '+'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'+'", tok)]

    def parsehelper_647(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'+'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_648(node) # '+'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_650(self, node):
        """ ## subexpr ##
        "'-'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_MINUS, '-'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'-'", tok)]

    def parsehelper_649(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'-'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_650(node) # '-'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_646(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[29]) and not ('EPS' in TABLE[29]):
            self.pos = oldpos
            return None

        c = self.parsehelper_647(node) # (1, 1, 1), GrammarNode('S', ["'+'"]) FIRST: frozenset({"'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_649(node) # (1, 1, 1), GrammarNode('S', ["'-'"]) FIRST: frozenset({"'-'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_651(self, node):
        """ ## subexpr ##
        'term'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_term()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_645(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"])]), 'term'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_646(node) # GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_651(node) # term
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_644(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"])]), 'term']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_645(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_642(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['term', GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"])]), 'term']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_643(node) # term
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_644(node) # GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"])]), 'term']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_arith_expr(self):
        """
        arith_expr: term (('+'|'-') term)*
        
        ['arith_expr', ':', GrammarNode('S', ['term', GrammarNode('*',
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]),
        GrammarNode('S', ["'-'"])]), 'term']))])]
        """
        node = astnode('arith_expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['arith_expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_642(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_653(self, node):
        """ ## subexpr ##
        'factor'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_factor()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_658(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_657(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_658(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_660(self, node):
        """ ## subexpr ##
        "'/'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_SLASH, '/'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'/'", tok)]

    def parsehelper_659(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'/'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_660(node) # '/'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_662(self, node):
        """ ## subexpr ##
        "'%'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_PERCENT, '%'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'%'", tok)]

    def parsehelper_661(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'%'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_662(node) # '%'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_664(self, node):
        """ ## subexpr ##
        "'//'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESLASH, '//'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'//'", tok)]

    def parsehelper_663(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'//'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_664(node) # '//'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_656(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'/'"]), GrammarNode('S', ["'%'"]), GrammarNode('S', ["'//'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[30]) and not ('EPS' in TABLE[30]):
            self.pos = oldpos
            return None

        c = self.parsehelper_657(node) # (1, 1, 1), GrammarNode('S', ["'*'"]) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_659(node) # (1, 1, 1), GrammarNode('S', ["'/'"]) FIRST: frozenset({"'/'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_661(node) # (1, 1, 1), GrammarNode('S', ["'%'"]) FIRST: frozenset({"'%'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_663(node) # (1, 1, 1), GrammarNode('S', ["'//'"]) FIRST: frozenset({"'//'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_665(self, node):
        """ ## subexpr ##
        'factor'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_factor()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_655(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'/'"]), GrammarNode('S', ["'%'"]), GrammarNode('S', ["'//'"])]), 'factor'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_656(node) # GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'/'"]), GrammarNode('S', ["'%'"]), GrammarNode('S', ["'//'"])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_665(node) # factor
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_654(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'/'"]), GrammarNode('S', ["'%'"]), GrammarNode('S', ["'//'"])]), 'factor']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_655(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_652(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['factor', GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'/'"]), GrammarNode('S', ["'%'"]), GrammarNode('S', ["'//'"])]), 'factor']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_653(node) # factor
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_654(node) # GrammarNode('*', GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'*'"]), GrammarNode('S', ["'/'"]), GrammarNode('S', ["'%'"]), GrammarNode('S', ["'//'"])]), 'factor']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_term(self):
        """
        term: factor (('*'|'/'|'%'|'//') factor)*
        
        ['term', ':', GrammarNode('S', ['factor', GrammarNode('*',
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'*'"]),
        GrammarNode('S', ["'/'"]), GrammarNode('S', ["'%'"]), GrammarNode('S',
        ["'//'"])]), 'factor']))])]
        """
        node = astnode('term')
        if self.tok_peek_gstr().isdisjoint(FIRST['term']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_652(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_670(self, node):
        """ ## subexpr ##
        "'+'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_PLUS, '+'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'+'", tok)]

    def parsehelper_669(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'+'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_670(node) # '+'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_672(self, node):
        """ ## subexpr ##
        "'-'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_MINUS, '-'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'-'", tok)]

    def parsehelper_671(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'-'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_672(node) # '-'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_674(self, node):
        """ ## subexpr ##
        "'~'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_TILDE, '~'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'~'", tok)]

    def parsehelper_673(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'~'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_674(node) # '~'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_668(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"]), GrammarNode('S', ["'~'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[31]) and not ('EPS' in TABLE[31]):
            self.pos = oldpos
            return None

        c = self.parsehelper_669(node) # (1, 1, 1), GrammarNode('S', ["'+'"]) FIRST: frozenset({"'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_671(node) # (1, 1, 1), GrammarNode('S', ["'-'"]) FIRST: frozenset({"'-'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_673(node) # (1, 1, 1), GrammarNode('S', ["'~'"]) FIRST: frozenset({"'~'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_675(self, node):
        """ ## subexpr ##
        'factor'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_factor()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_667(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"]), GrammarNode('S', ["'~'"])]), 'factor'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_668(node) # GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"]), GrammarNode('S', ["'~'"])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_675(node) # factor
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_677(self, node):
        """ ## subexpr ##
        'power'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_power()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_676(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['power'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_677(node) # power
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_666(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"]), GrammarNode('S', ["'~'"])]), 'factor']), GrammarNode('S', ['power'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[32]) and not ('EPS' in TABLE[32]):
            self.pos = oldpos
            return None

        c = self.parsehelper_667(node) # (1, 2, 1), GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"]), GrammarNode('S', ["'~'"])]), 'factor']) FIRST: frozenset({"'-'", "'~'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_676(node) # (1, 1, 0), GrammarNode('S', ['power']) FIRST: frozenset({"'True'", 'STRING', "'False'", "'None'", 'NUMBER', "'{'", "'('", "'['", "'...'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_factor(self):
        """
        factor: ('+'|'-'|'~') factor | power
        
        ['factor', ':', GrammarNode('A', [GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', ["'+'"]), GrammarNode('S', ["'-'"]),
        GrammarNode('S', ["'~'"])]), 'factor']), GrammarNode('S',
        ['power'])])]
        """
        node = astnode('factor')
        if self.tok_peek_gstr().isdisjoint(FIRST['factor']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_666(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_679(self, node):
        """ ## subexpr ##
        'atom'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_atom()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_682(self, node):
        """ ## subexpr ##
        'trailer'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_trailer()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_681(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['trailer'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_682(node) # trailer
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_680(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ['trailer']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_681(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_685(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_686(self, node):
        """ ## subexpr ##
        'factor'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_factor()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_684(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'**'", 'factor'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_685(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_686(node) # factor
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_683(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'**'", 'factor']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_684(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_678(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['atom', GrammarNode('*', GrammarNode('S', ['trailer'])), GrammarNode('[', GrammarNode('S', ["'**'", 'factor']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_679(node) # atom
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_680(node) # GrammarNode('*', GrammarNode('S', ['trailer']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_683(node) # GrammarNode('[', GrammarNode('S', ["'**'", 'factor']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_power(self):
        """
        power: atom trailer* ['**' factor]
        
        ['power', ':', GrammarNode('S', ['atom', GrammarNode('*',
        GrammarNode('S', ['trailer'])), GrammarNode('[', GrammarNode('S',
        ["'**'", 'factor']))])]
        """
        node = astnode('power')
        if self.tok_peek_gstr().isdisjoint(FIRST['power']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_678(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_690(self, node):
        """ ## subexpr ##
        "'('"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LPAR, '('):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'('", tok)]

    def parsehelper_694(self, node):
        """ ## subexpr ##
        'yield_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_yield_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_693(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['yield_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_694(node) # yield_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_696(self, node):
        """ ## subexpr ##
        'testlist_comp'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist_comp()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_695(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist_comp'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_696(node) # testlist_comp
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_692(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[33]) and not ('EPS' in TABLE[33]):
            self.pos = oldpos
            return None

        c = self.parsehelper_693(node) # (1, 1, 1), GrammarNode('S', ['yield_expr']) FIRST: frozenset({"'yield'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_695(node) # (1, 1, 0), GrammarNode('S', ['testlist_comp']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", 'NUMBER', "'{'", "'lambda'", "'...'", 'STRING', 'NAME', "'False'", "'-'", "'['", "'('", "'*'", "'+'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_691(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_692(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_697(self, node):
        """ ## subexpr ##
        "')'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RPAR, ')'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("')'", tok)]

    def parsehelper_689(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])])), "')'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_690(node) # '('
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_691(node) # GrammarNode('[', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_697(node) # ')'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_699(self, node):
        """ ## subexpr ##
        "'['"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LSQB, '['):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'['", tok)]

    def parsehelper_702(self, node):
        """ ## subexpr ##
        'testlist_comp'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist_comp()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_701(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist_comp'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_702(node) # testlist_comp
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_700(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['testlist_comp']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_701(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_703(self, node):
        """ ## subexpr ##
        "']'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RSQB, ']'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("']'", tok)]

    def parsehelper_698(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'['", GrammarNode('[', GrammarNode('S', ['testlist_comp'])), "']'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_699(node) # '['
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_700(node) # GrammarNode('[', GrammarNode('S', ['testlist_comp']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_703(node) # ']'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_705(self, node):
        """ ## subexpr ##
        "'{'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LBRACE, '{'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'{'", tok)]

    def parsehelper_708(self, node):
        """ ## subexpr ##
        'dictorsetmaker'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_dictorsetmaker()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_707(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['dictorsetmaker'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_708(node) # dictorsetmaker
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_706(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['dictorsetmaker']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_707(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_709(self, node):
        """ ## subexpr ##
        "'}'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RBRACE, '}'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'}'", tok)]

    def parsehelper_704(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'{'", GrammarNode('[', GrammarNode('S', ['dictorsetmaker'])), "'}'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_705(node) # '{'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_706(node) # GrammarNode('[', GrammarNode('S', ['dictorsetmaker']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_709(node) # '}'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_711(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_710(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_711(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_713(self, node):
        """ ## subexpr ##
        'NUMBER'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NUMBER):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NUMBER', tok)]

    def parsehelper_712(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NUMBER'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_713(node) # NUMBER
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_717(self, node):
        """ ## subexpr ##
        'STRING'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_STRING):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('STRING', tok)]

    def parsehelper_716(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['STRING'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_717(node) # STRING
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_715(self, node):
        """ ## subexpr ##
        GrammarNode('+', GrammarNode('S', ['STRING']))
        """
        oldpos = self.pos
        #

        # +-type (1+)
        childs = []
        i = 0
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_716(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
            i = i + 1
        if i == 0:
            self.pos = oldpos
            return None
        return childs

    def parsehelper_714(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('+', GrammarNode('S', ['STRING']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_715(node) # GrammarNode('+', GrammarNode('S', ['STRING']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_719(self, node):
        """ ## subexpr ##
        "'...'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_ELLIPSIS, '...'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'...'", tok)]

    def parsehelper_718(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'...'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_719(node) # '...'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_721(self, node):
        """ ## subexpr ##
        "'None'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'None'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'None'", tok)]

    def parsehelper_720(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'None'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_721(node) # 'None'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_723(self, node):
        """ ## subexpr ##
        "'True'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'True'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'True'", tok)]

    def parsehelper_722(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'True'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_723(node) # 'True'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_725(self, node):
        """ ## subexpr ##
        "'False'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'False'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'False'", tok)]

    def parsehelper_724(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'False'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_725(node) # 'False'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_688(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])])), "')'"]), GrammarNode('S', ["'['", GrammarNode('[', GrammarNode('S', ['testlist_comp'])), "']'"]), GrammarNode('S', ["'{'", GrammarNode('[', GrammarNode('S', ['dictorsetmaker'])), "'}'"]), GrammarNode('S', ['NAME']), GrammarNode('S', ['NUMBER']), GrammarNode('S', [GrammarNode('+', GrammarNode('S', ['STRING']))]), GrammarNode('S', ["'...'"]), GrammarNode('S', ["'None'"]), GrammarNode('S', ["'True'"]), GrammarNode('S', ["'False'"])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[34]) and not ('EPS' in TABLE[34]):
            self.pos = oldpos
            return None

        c = self.parsehelper_689(node) # (1, 3, 1), GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])])), "')'"]) FIRST: frozenset({"'('"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_698(node) # (1, 3, 1), GrammarNode('S', ["'['", GrammarNode('[', GrammarNode('S', ['testlist_comp'])), "']'"]) FIRST: frozenset({"'['"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_704(node) # (1, 3, 1), GrammarNode('S', ["'{'", GrammarNode('[', GrammarNode('S', ['dictorsetmaker'])), "'}'"]) FIRST: frozenset({"'{'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_712(node) # (1, 1, 1), GrammarNode('S', ['NUMBER']) FIRST: frozenset({'NUMBER'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_714(node) # (1, 1, 1), GrammarNode('S', [GrammarNode('+', GrammarNode('S', ['STRING']))]) FIRST: frozenset({'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_718(node) # (1, 1, 1), GrammarNode('S', ["'...'"]) FIRST: frozenset({"'...'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_720(node) # (1, 1, 1), GrammarNode('S', ["'None'"]) FIRST: frozenset({"'None'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_722(node) # (1, 1, 1), GrammarNode('S', ["'True'"]) FIRST: frozenset({"'True'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_724(node) # (1, 1, 1), GrammarNode('S', ["'False'"]) FIRST: frozenset({"'False'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_710(node) # (1, 1, 0), GrammarNode('S', ['NAME']) FIRST: frozenset({'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_687(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])])), "')'"]), GrammarNode('S', ["'['", GrammarNode('[', GrammarNode('S', ['testlist_comp'])), "']'"]), GrammarNode('S', ["'{'", GrammarNode('[', GrammarNode('S', ['dictorsetmaker'])), "'}'"]), GrammarNode('S', ['NAME']), GrammarNode('S', ['NUMBER']), GrammarNode('S', [GrammarNode('+', GrammarNode('S', ['STRING']))]), GrammarNode('S', ["'...'"]), GrammarNode('S', ["'None'"]), GrammarNode('S', ["'True'"]), GrammarNode('S', ["'False'"])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_688(node) # GrammarNode('A', [GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('A', [GrammarNode('S', ['yield_expr']), GrammarNode('S', ['testlist_comp'])])), "')'"]), GrammarNode('S', ["'['", GrammarNode('[', GrammarNode('S', ['testlist_comp'])), "']'"]), GrammarNode('S', ["'{'", GrammarNode('[', GrammarNode('S', ['dictorsetmaker'])), "'}'"]), GrammarNode('S', ['NAME']), GrammarNode('S', ['NUMBER']), GrammarNode('S', [GrammarNode('+', GrammarNode('S', ['STRING']))]), GrammarNode('S', ["'...'"]), GrammarNode('S', ["'None'"]), GrammarNode('S', ["'True'"]), GrammarNode('S', ["'False'"])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_atom(self):
        """
        atom: ('(' [yield_expr|testlist_comp] ')' | '[' [testlist_comp] ']' |
        '{' [dictorsetmaker] '}' | NAME | NUMBER | STRING+ | '...' | 'None' |
        'True' | 'False')
        
        ['atom', ':', GrammarNode('S', [GrammarNode('A', [GrammarNode('S',
        ["'('", GrammarNode('[', GrammarNode('A', [GrammarNode('S',
        ['yield_expr']), GrammarNode('S', ['testlist_comp'])])), "')'"]),
        GrammarNode('S', ["'['", GrammarNode('[', GrammarNode('S',
        ['testlist_comp'])), "']'"]), GrammarNode('S', ["'{'",
        GrammarNode('[', GrammarNode('S', ['dictorsetmaker'])), "'}'"]),
        GrammarNode('S', ['NAME']), GrammarNode('S', ['NUMBER']),
        GrammarNode('S', [GrammarNode('+', GrammarNode('S', ['STRING']))]),
        GrammarNode('S', ["'...'"]), GrammarNode('S', ["'None'"]),
        GrammarNode('S', ["'True'"]), GrammarNode('S', ["'False'"])])])]
        """
        node = astnode('atom')
        if self.tok_peek_gstr().isdisjoint(FIRST['atom']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_687(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_729(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_728(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_729(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_731(self, node):
        """ ## subexpr ##
        'star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_730(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['star_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_731(node) # star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_727(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[35]) and not ('EPS' in TABLE[35]):
            self.pos = oldpos
            return None

        c = self.parsehelper_730(node) # (1, 1, 1), GrammarNode('S', ['star_expr']) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_728(node) # (1, 1, 0), GrammarNode('S', ['test']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_734(self, node):
        """ ## subexpr ##
        'comp_for'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_for()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_733(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_for'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_734(node) # comp_for
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_738(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_741(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_740(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_741(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_743(self, node):
        """ ## subexpr ##
        'star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_742(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['star_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_743(node) # star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_739(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[36]) and not ('EPS' in TABLE[36]):
            self.pos = oldpos
            return None

        c = self.parsehelper_742(node) # (1, 1, 1), GrammarNode('S', ['star_expr']) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_740(node) # (1, 1, 0), GrammarNode('S', ['test']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_737(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_738(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_739(node) # GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_736(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_737(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_746(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_745(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_746(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_744(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_745(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_735(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_736(node) # GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_744(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_732(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])), GrammarNode('[', GrammarNode('S', ["','"]))])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[37]) and not ('EPS' in TABLE[37]):
            self.pos = oldpos
            return None

        c = self.parsehelper_733(node) # (1, 1, 1), GrammarNode('S', ['comp_for']) FIRST: frozenset({"'for'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_735(node) # (0, 2, 1), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])), GrammarNode('[', GrammarNode('S', ["','"]))]) FIRST: frozenset({'EPS', "','"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_726(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])]), GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])), GrammarNode('[', GrammarNode('S', ["','"]))])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_727(node) # GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_732(node) # GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])), GrammarNode('[', GrammarNode('S', ["','"]))])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_testlist_comp(self):
        """
        testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))*
        [','] )
        
        ['testlist_comp', ':', GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])]),
        GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S',
        [GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A',
        [GrammarNode('S', ['test']), GrammarNode('S', ['star_expr'])])])),
        GrammarNode('[', GrammarNode('S', ["','"]))])])])]
        """
        node = astnode('testlist_comp')
        if self.tok_peek_gstr().isdisjoint(FIRST['testlist_comp']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_726(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_749(self, node):
        """ ## subexpr ##
        "'('"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LPAR, '('):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'('", tok)]

    def parsehelper_752(self, node):
        """ ## subexpr ##
        'arglist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_arglist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_751(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['arglist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_752(node) # arglist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_750(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['arglist']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_751(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_753(self, node):
        """ ## subexpr ##
        "')'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RPAR, ')'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("')'", tok)]

    def parsehelper_748(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_749(node) # '('
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_750(node) # GrammarNode('[', GrammarNode('S', ['arglist']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_753(node) # ')'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_755(self, node):
        """ ## subexpr ##
        "'['"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LSQB, '['):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'['", tok)]

    def parsehelper_756(self, node):
        """ ## subexpr ##
        'subscriptlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_subscriptlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_757(self, node):
        """ ## subexpr ##
        "']'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RSQB, ']'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("']'", tok)]

    def parsehelper_754(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'['", 'subscriptlist', "']'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_755(node) # '['
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_756(node) # subscriptlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_757(node) # ']'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_759(self, node):
        """ ## subexpr ##
        "'.'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOT, '.'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'.'", tok)]

    def parsehelper_760(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_758(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'.'", 'NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_759(node) # '.'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_760(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_747(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"]), GrammarNode('S', ["'['", 'subscriptlist', "']'"]), GrammarNode('S', ["'.'", 'NAME'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[38]) and not ('EPS' in TABLE[38]):
            self.pos = oldpos
            return None

        c = self.parsehelper_748(node) # (1, 3, 1), GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"]) FIRST: frozenset({"'('"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_754(node) # (1, 3, 1), GrammarNode('S', ["'['", 'subscriptlist', "']'"]) FIRST: frozenset({"'['"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_758(node) # (1, 2, 1), GrammarNode('S', ["'.'", 'NAME']) FIRST: frozenset({"'.'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_trailer(self):
        """
        trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
        
        ['trailer', ':', GrammarNode('A', [GrammarNode('S', ["'('",
        GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"]),
        GrammarNode('S', ["'['", 'subscriptlist', "']'"]), GrammarNode('S',
        ["'.'", 'NAME'])])]
        """
        node = astnode('trailer')
        if self.tok_peek_gstr().isdisjoint(FIRST['trailer']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_747(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_762(self, node):
        """ ## subexpr ##
        'subscript'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_subscript()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_765(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_766(self, node):
        """ ## subexpr ##
        'subscript'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_subscript()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_764(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'subscript'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_765(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_766(node) # subscript
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_763(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'subscript']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_764(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_769(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_768(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_769(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_767(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_768(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_761(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['subscript', GrammarNode('*', GrammarNode('S', ["','", 'subscript'])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_762(node) # subscript
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_763(node) # GrammarNode('*', GrammarNode('S', ["','", 'subscript']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_767(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_subscriptlist(self):
        """
        subscriptlist: subscript (',' subscript)* [',']
        
        ['subscriptlist', ':', GrammarNode('S', ['subscript', GrammarNode('*',
        GrammarNode('S', ["','", 'subscript'])), GrammarNode('[',
        GrammarNode('S', ["','"]))])]
        """
        node = astnode('subscriptlist')
        if self.tok_peek_gstr().isdisjoint(FIRST['subscriptlist']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_761(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_772(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_771(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_772(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_776(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_775(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_776(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_774(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_775(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_777(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_780(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_779(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_780(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_778(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_779(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_783(self, node):
        """ ## subexpr ##
        'sliceop'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_sliceop()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_782(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['sliceop'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_783(node) # sliceop
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_781(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['sliceop']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_782(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_773(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('[', GrammarNode('S', ['test'])), "':'", GrammarNode('[', GrammarNode('S', ['test'])), GrammarNode('[', GrammarNode('S', ['sliceop']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_774(node) # GrammarNode('[', GrammarNode('S', ['test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_777(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_778(node) # GrammarNode('[', GrammarNode('S', ['test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_781(node) # GrammarNode('[', GrammarNode('S', ['sliceop']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_770(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['test']), GrammarNode('S', [GrammarNode('[', GrammarNode('S', ['test'])), "':'", GrammarNode('[', GrammarNode('S', ['test'])), GrammarNode('[', GrammarNode('S', ['sliceop']))])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[39]) and not ('EPS' in TABLE[39]):
            self.pos = oldpos
            return None

        c = self.parsehelper_773(node) # (1, 4, 0), GrammarNode('S', [GrammarNode('[', GrammarNode('S', ['test'])), "':'", GrammarNode('[', GrammarNode('S', ['test'])), GrammarNode('[', GrammarNode('S', ['sliceop']))]) FIRST: frozenset({"'True'", "'~'", "'not'", "':'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'lambda'", 'STRING', "'['", "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_771(node) # (1, 1, 0), GrammarNode('S', ['test']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}) INTERSECTION: YES (0, frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'lambda'", "'...'", "'+'", 'STRING'}))
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_subscript(self):
        """
        subscript: test | [test] ':' [test] [sliceop]
        
        ['subscript', ':', GrammarNode('A', [GrammarNode('S', ['test']),
        GrammarNode('S', [GrammarNode('[', GrammarNode('S', ['test'])), "':'",
        GrammarNode('[', GrammarNode('S', ['test'])), GrammarNode('[',
        GrammarNode('S', ['sliceop']))])])]
        """
        node = astnode('subscript')
        if self.tok_peek_gstr().isdisjoint(FIRST['subscript']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_770(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_785(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_788(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_787(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_788(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_786(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_787(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_784(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["':'", GrammarNode('[', GrammarNode('S', ['test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_785(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_786(node) # GrammarNode('[', GrammarNode('S', ['test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_sliceop(self):
        """
        sliceop: ':' [test]
        
        ['sliceop', ':', GrammarNode('S', ["':'", GrammarNode('[',
        GrammarNode('S', ['test']))])]
        """
        node = astnode('sliceop')
        if self.tok_peek_gstr().isdisjoint(FIRST['sliceop']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_784(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_792(self, node):
        """ ## subexpr ##
        'expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_791(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_792(node) # expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_794(self, node):
        """ ## subexpr ##
        'star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_793(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['star_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_794(node) # star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_790(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[40]) and not ('EPS' in TABLE[40]):
            self.pos = oldpos
            return None

        c = self.parsehelper_793(node) # (1, 1, 1), GrammarNode('S', ['star_expr']) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_791(node) # (1, 1, 0), GrammarNode('S', ['expr']) FIRST: frozenset({"'True'", "'~'", "'False'", "'None'", "'-'", 'NUMBER', "'{'", "'('", "'['", 'STRING', "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_797(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_800(self, node):
        """ ## subexpr ##
        'expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_799(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_800(node) # expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_802(self, node):
        """ ## subexpr ##
        'star_expr'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_star_expr()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_801(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['star_expr'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_802(node) # star_expr
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_798(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[41]) and not ('EPS' in TABLE[41]):
            self.pos = oldpos
            return None

        c = self.parsehelper_801(node) # (1, 1, 1), GrammarNode('S', ['star_expr']) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_799(node) # (1, 1, 0), GrammarNode('S', ['expr']) FIRST: frozenset({"'True'", "'~'", "'False'", "'None'", "'-'", 'NUMBER', "'{'", "'('", "'['", 'STRING', "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_796(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_797(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_798(node) # GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_795(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_796(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_805(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_804(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_805(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_803(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_804(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_789(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])]), GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_790(node) # GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_795(node) # GrammarNode('*', GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['expr']), GrammarNode('S', ['star_expr'])])]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_803(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_exprlist(self):
        """
        exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
        
        ['exprlist', ':', GrammarNode('S', [GrammarNode('A', [GrammarNode('S',
        ['expr']), GrammarNode('S', ['star_expr'])]), GrammarNode('*',
        GrammarNode('S', ["','", GrammarNode('A', [GrammarNode('S', ['expr']),
        GrammarNode('S', ['star_expr'])])])), GrammarNode('[',
        GrammarNode('S', ["','"]))])]
        """
        node = astnode('exprlist')
        if self.tok_peek_gstr().isdisjoint(FIRST['exprlist']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_789(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_807(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_810(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_811(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_809(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_810(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_811(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_808(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'test']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_809(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_814(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_813(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_814(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_812(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_813(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_806(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_807(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_808(node) # GrammarNode('*', GrammarNode('S', ["','", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_812(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_testlist(self):
        """
        testlist: test (',' test)* [',']
        
        ['testlist', ':', GrammarNode('S', ['test', GrammarNode('*',
        GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S',
        ["','"]))])]
        """
        node = astnode('testlist')
        if self.tok_peek_gstr().isdisjoint(FIRST['testlist']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_806(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_819(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_820(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_821(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_824(self, node):
        """ ## subexpr ##
        'comp_for'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_for()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_823(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_for'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_824(node) # comp_for
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_828(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_829(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_830(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_831(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_827(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'test', "':'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_828(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_829(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_830(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_831(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_826(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_827(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_834(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_833(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_834(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_832(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_833(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_825(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_826(node) # GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_832(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_822(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[42]) and not ('EPS' in TABLE[42]):
            self.pos = oldpos
            return None

        c = self.parsehelper_823(node) # (1, 1, 1), GrammarNode('S', ['comp_for']) FIRST: frozenset({"'for'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_825(node) # (0, 4, 1), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))]) FIRST: frozenset({'EPS', "','"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_818(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', "':'", 'test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_819(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_820(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_821(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_822(node) # GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_817(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('S', ['test', "':'", 'test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_818(node) # GrammarNode('S', ['test', "':'", 'test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_837(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_840(self, node):
        """ ## subexpr ##
        'comp_for'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_for()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_839(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_for'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_840(node) # comp_for
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_844(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_845(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_843(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_844(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_845(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_842(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'test']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_843(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_848(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_847(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_848(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_846(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_847(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_841(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_842(node) # GrammarNode('*', GrammarNode('S', ["','", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_846(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_838(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[43]) and not ('EPS' in TABLE[43]):
            self.pos = oldpos
            return None

        c = self.parsehelper_839(node) # (1, 1, 1), GrammarNode('S', ['comp_for']) FIRST: frozenset({"'for'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_841(node) # (0, 2, 1), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))]) FIRST: frozenset({'EPS', "','"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_836(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_837(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_838(node) # GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_835(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_836(node) # GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_816(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', [GrammarNode('S', ['test', "':'", 'test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])]), GrammarNode('S', [GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[44]) and not ('EPS' in TABLE[44]):
            self.pos = oldpos
            return None

        c = self.parsehelper_817(node) # (1, 4, 0), GrammarNode('S', [GrammarNode('S', ['test', "':'", 'test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])]) FIRST: frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'lambda'", "'...'", "'+'", 'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_835(node) # (1, 2, 0), GrammarNode('S', [GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])]) FIRST: frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'lambda'", "'...'", "'+'", 'STRING'}) INTERSECTION: YES (0, frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}))
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_815(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('A', [GrammarNode('S', [GrammarNode('S', ['test', "':'", 'test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])]), GrammarNode('S', [GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_816(node) # GrammarNode('A', [GrammarNode('S', [GrammarNode('S', ['test', "':'", 'test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])]), GrammarNode('S', [GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S', ["','", 'test'])), GrammarNode('[', GrammarNode('S', ["','"]))])])])])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_dictorsetmaker(self):
        """
        dictorsetmaker: ( (test ':' test (comp_for | (',' test ':' test)*
        [','])) | (test (comp_for | (',' test)* [','])) )
        
        ['dictorsetmaker', ':', GrammarNode('S', [GrammarNode('A',
        [GrammarNode('S', [GrammarNode('S', ['test', "':'", 'test',
        GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S',
        [GrammarNode('*', GrammarNode('S', ["','", 'test', "':'", 'test'])),
        GrammarNode('[', GrammarNode('S', ["','"]))])])])]), GrammarNode('S',
        [GrammarNode('S', ['test', GrammarNode('A', [GrammarNode('S',
        ['comp_for']), GrammarNode('S', [GrammarNode('*', GrammarNode('S',
        ["','", 'test'])), GrammarNode('[', GrammarNode('S',
        ["','"]))])])])])])])]
        """
        node = astnode('dictorsetmaker')
        if self.tok_peek_gstr().isdisjoint(FIRST['dictorsetmaker']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_815(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_850(self, node):
        """ ## subexpr ##
        "'class'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'class'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'class'", tok)]

    def parsehelper_851(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_854(self, node):
        """ ## subexpr ##
        "'('"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_LPAR, '('):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'('", tok)]

    def parsehelper_857(self, node):
        """ ## subexpr ##
        'arglist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_arglist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_856(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['arglist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_857(node) # arglist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_855(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['arglist']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_856(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_858(self, node):
        """ ## subexpr ##
        "')'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_RPAR, ')'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("')'", tok)]

    def parsehelper_853(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_854(node) # '('
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_855(node) # GrammarNode('[', GrammarNode('S', ['arglist']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_858(node) # ')'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_852(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_853(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_859(self, node):
        """ ## subexpr ##
        "':'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COLON, ':'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("':'", tok)]

    def parsehelper_860(self, node):
        """ ## subexpr ##
        'suite'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_suite()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_849(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'class'", 'NAME', GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"])), "':'", 'suite'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_850(node) # 'class'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_851(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_852(node) # GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[', GrammarNode('S', ['arglist'])), "')'"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_859(node) # ':'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_860(node) # suite
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_classdef(self):
        """
        classdef: 'class' NAME ['(' [arglist] ')'] ':' suite
        
        ['classdef', ':', GrammarNode('S', ["'class'", 'NAME',
        GrammarNode('[', GrammarNode('S', ["'('", GrammarNode('[',
        GrammarNode('S', ['arglist'])), "')'"])), "':'", 'suite'])]
        """
        node = astnode('classdef')
        if self.tok_peek_gstr().isdisjoint(FIRST['classdef']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_849(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_864(self, node):
        """ ## subexpr ##
        'argument'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_argument()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_865(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_863(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['argument', "','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_864(node) # argument
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_865(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_862(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ['argument', "','"]))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_863(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_868(self, node):
        """ ## subexpr ##
        'argument'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_argument()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_871(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_870(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','"])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_871(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_869(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','"]))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_870(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_867(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['argument', GrammarNode('[', GrammarNode('S', ["','"]))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_868(node) # argument
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_869(node) # GrammarNode('[', GrammarNode('S', ["','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_873(self, node):
        """ ## subexpr ##
        "'*'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_STAR, '*'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'*'", tok)]

    def parsehelper_874(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_877(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_878(self, node):
        """ ## subexpr ##
        'argument'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_argument()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_876(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", 'argument'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_877(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_878(node) # argument
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_875(self, node):
        """ ## subexpr ##
        GrammarNode('*', GrammarNode('S', ["','", 'argument']))
        """
        oldpos = self.pos
        #

        # *-type (0+)
        childs = []
        while True:
            oldpos2 = self.pos
            c = self.parsehelper_876(node)
            if c is None:
                self.pos = oldpos2
                break
            childs.extend(c)
        return childs

    def parsehelper_881(self, node):
        """ ## subexpr ##
        "','"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_COMMA, ','):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("','", tok)]

    def parsehelper_882(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_883(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_880(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["','", "'**'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_881(node) # ','
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_882(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_883(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_879(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ["','", "'**'", 'test']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_880(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_872(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'*'", 'test', GrammarNode('*', GrammarNode('S', ["','", 'argument'])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'test']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_873(node) # '*'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_874(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_875(node) # GrammarNode('*', GrammarNode('S', ["','", 'argument']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_879(node) # GrammarNode('[', GrammarNode('S', ["','", "'**'", 'test']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_885(self, node):
        """ ## subexpr ##
        "'**'"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_DOUBLESTAR, '**'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'**'", tok)]

    def parsehelper_886(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_884(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'**'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_885(node) # '**'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_886(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_866(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['argument', GrammarNode('[', GrammarNode('S', ["','"]))]), GrammarNode('S', ["'*'", 'test', GrammarNode('*', GrammarNode('S', ["','", 'argument'])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'test']))]), GrammarNode('S', ["'**'", 'test'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[45]) and not ('EPS' in TABLE[45]):
            self.pos = oldpos
            return None

        c = self.parsehelper_872(node) # (1, 4, 1), GrammarNode('S', ["'*'", 'test', GrammarNode('*', GrammarNode('S', ["','", 'argument'])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'test']))]) FIRST: frozenset({"'*'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_884(node) # (1, 2, 1), GrammarNode('S', ["'**'", 'test']) FIRST: frozenset({"'**'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_867(node) # (1, 2, 0), GrammarNode('S', ['argument', GrammarNode('[', GrammarNode('S', ["','"]))]) FIRST: frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'lambda'", "'['", "'...'", "'+'", 'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parsehelper_861(self, node):
        """ ## subexpr ##
        GrammarNode('S', [GrammarNode('*', GrammarNode('S', ['argument', "','"])), GrammarNode('A', [GrammarNode('S', ['argument', GrammarNode('[', GrammarNode('S', ["','"]))]), GrammarNode('S', ["'*'", 'test', GrammarNode('*', GrammarNode('S', ["','", 'argument'])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'test']))]), GrammarNode('S', ["'**'", 'test'])])])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_862(node) # GrammarNode('*', GrammarNode('S', ['argument', "','"]))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_866(node) # GrammarNode('A', [GrammarNode('S', ['argument', GrammarNode('[', GrammarNode('S', ["','"]))]), GrammarNode('S', ["'*'", 'test', GrammarNode('*', GrammarNode('S', ["','", 'argument'])), GrammarNode('[', GrammarNode('S', ["','", "'**'", 'test']))]), GrammarNode('S', ["'**'", 'test'])])
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_arglist(self):
        """
        arglist: (argument ',')* (argument [','] |'*' test (',' argument)*
        [',' '**' test] |'**' test)
        
        ['arglist', ':', GrammarNode('S', [GrammarNode('*', GrammarNode('S',
        ['argument', "','"])), GrammarNode('A', [GrammarNode('S', ['argument',
        GrammarNode('[', GrammarNode('S', ["','"]))]), GrammarNode('S',
        ["'*'", 'test', GrammarNode('*', GrammarNode('S', ["','",
        'argument'])), GrammarNode('[', GrammarNode('S', ["','", "'**'",
        'test']))]), GrammarNode('S', ["'**'", 'test'])])])]
        """
        node = astnode('arglist')
        if self.tok_peek_gstr().isdisjoint(FIRST['arglist']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_861(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_889(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_892(self, node):
        """ ## subexpr ##
        'comp_for'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_for()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_891(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_for'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_892(node) # comp_for
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_890(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['comp_for']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_891(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_888(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ['comp_for']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_889(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_890(node) # GrammarNode('[', GrammarNode('S', ['comp_for']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_894(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_895(self, node):
        """ ## subexpr ##
        "'='"
        """
        oldpos = self.pos
        #

        # Terminal literal operator
        if not self.tok_test(tokenizer.T_EQUAL, '='):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'='", tok)]

    def parsehelper_896(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_893(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['test', "'='", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_894(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_895(node) # '='
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_896(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_887(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ['comp_for']))]), GrammarNode('S', ['test', "'='", 'test'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[46]) and not ('EPS' in TABLE[46]):
            self.pos = oldpos
            return None

        c = self.parsehelper_893(node) # (1, 3, 0), GrammarNode('S', ['test', "'='", 'test']) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_888(node) # (1, 2, 0), GrammarNode('S', ['test', GrammarNode('[', GrammarNode('S', ['comp_for']))]) FIRST: frozenset({"'True'", "'~'", "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", 'STRING', "'lambda'", "'...'", "'+'", 'NAME'}) INTERSECTION: YES (0, frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'lambda'", "'...'", "'+'", 'STRING'}))
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_argument(self):
        """
        argument: test [comp_for] | test '=' test
        
        ['argument', ':', GrammarNode('A', [GrammarNode('S', ['test',
        GrammarNode('[', GrammarNode('S', ['comp_for']))]), GrammarNode('S',
        ['test', "'='", 'test'])])]
        """
        node = astnode('argument')
        if self.tok_peek_gstr().isdisjoint(FIRST['argument']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_887(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_899(self, node):
        """ ## subexpr ##
        'comp_for'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_for()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_898(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_for'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_899(node) # comp_for
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_901(self, node):
        """ ## subexpr ##
        'comp_if'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_if()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_900(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_if'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_901(node) # comp_if
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_897(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ['comp_for']), GrammarNode('S', ['comp_if'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[47]) and not ('EPS' in TABLE[47]):
            self.pos = oldpos
            return None

        c = self.parsehelper_898(node) # (1, 1, 1), GrammarNode('S', ['comp_for']) FIRST: frozenset({"'for'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_900(node) # (1, 1, 1), GrammarNode('S', ['comp_if']) FIRST: frozenset({"'if'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_comp_iter(self):
        """
        comp_iter: comp_for | comp_if
        
        ['comp_iter', ':', GrammarNode('A', [GrammarNode('S', ['comp_for']),
        GrammarNode('S', ['comp_if'])])]
        """
        node = astnode('comp_iter')
        if self.tok_peek_gstr().isdisjoint(FIRST['comp_iter']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_897(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_903(self, node):
        """ ## subexpr ##
        "'for'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'for'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'for'", tok)]

    def parsehelper_904(self, node):
        """ ## subexpr ##
        'exprlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_exprlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_905(self, node):
        """ ## subexpr ##
        "'in'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'in'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'in'", tok)]

    def parsehelper_906(self, node):
        """ ## subexpr ##
        'or_test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_or_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_909(self, node):
        """ ## subexpr ##
        'comp_iter'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_iter()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_908(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_iter'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_909(node) # comp_iter
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_907(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['comp_iter']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_908(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_902(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'for'", 'exprlist', "'in'", 'or_test', GrammarNode('[', GrammarNode('S', ['comp_iter']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_903(node) # 'for'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_904(node) # exprlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_905(node) # 'in'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_906(node) # or_test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_907(node) # GrammarNode('[', GrammarNode('S', ['comp_iter']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_comp_for(self):
        """
        comp_for: 'for' exprlist 'in' or_test [comp_iter]
        
        ['comp_for', ':', GrammarNode('S', ["'for'", 'exprlist', "'in'",
        'or_test', GrammarNode('[', GrammarNode('S', ['comp_iter']))])]
        """
        node = astnode('comp_for')
        if self.tok_peek_gstr().isdisjoint(FIRST['comp_for']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_902(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_911(self, node):
        """ ## subexpr ##
        "'if'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'if'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'if'", tok)]

    def parsehelper_912(self, node):
        """ ## subexpr ##
        'test_nocond'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test_nocond()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_915(self, node):
        """ ## subexpr ##
        'comp_iter'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_comp_iter()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_914(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['comp_iter'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_915(node) # comp_iter
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_913(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['comp_iter']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_914(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_910(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'if'", 'test_nocond', GrammarNode('[', GrammarNode('S', ['comp_iter']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_911(node) # 'if'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_912(node) # test_nocond
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_913(node) # GrammarNode('[', GrammarNode('S', ['comp_iter']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_comp_if(self):
        """
        comp_if: 'if' test_nocond [comp_iter]
        
        ['comp_if', ':', GrammarNode('S', ["'if'", 'test_nocond',
        GrammarNode('[', GrammarNode('S', ['comp_iter']))])]
        """
        node = astnode('comp_if')
        if self.tok_peek_gstr().isdisjoint(FIRST['comp_if']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_910(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_917(self, node):
        """ ## subexpr ##
        'NAME'
        """
        oldpos = self.pos
        #

        # Terminal std
        if not self.tok_test(tokenizer.T_NAME):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode('NAME', tok)]

    def parsehelper_916(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['NAME'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_917(node) # NAME
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_encoding_decl(self):
        """
        encoding_decl: NAME
        
        ['encoding_decl', ':', GrammarNode('S', ['NAME'])]
        """
        node = astnode('encoding_decl')
        if self.tok_peek_gstr().isdisjoint(FIRST['encoding_decl']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_916(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_919(self, node):
        """ ## subexpr ##
        "'yield'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'yield'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'yield'", tok)]

    def parsehelper_922(self, node):
        """ ## subexpr ##
        'yield_arg'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_yield_arg()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_921(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['yield_arg'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_922(node) # yield_arg
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_920(self, node):
        """ ## subexpr ##
        GrammarNode('[', GrammarNode('S', ['yield_arg']))
        """
        oldpos = self.pos
        #

        # [-type (opt)
        c = self.parsehelper_921(node)
        if c is None:
            self.pos = oldpos
            return []
        return c

    def parsehelper_918(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'yield'", GrammarNode('[', GrammarNode('S', ['yield_arg']))])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_919(node) # 'yield'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_920(node) # GrammarNode('[', GrammarNode('S', ['yield_arg']))
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parse_yield_expr(self):
        """
        yield_expr: 'yield' [yield_arg]
        
        ['yield_expr', ':', GrammarNode('S', ["'yield'", GrammarNode('[',
        GrammarNode('S', ['yield_arg']))])]
        """
        node = astnode('yield_expr')
        if self.tok_peek_gstr().isdisjoint(FIRST['yield_expr']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_918(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node

    def parsehelper_925(self, node):
        """ ## subexpr ##
        "'from'"
        """
        oldpos = self.pos
        #

        # Terminal NAME
        if not self.tok_test(tokenizer.T_NAME, 'from'):
            return None
        tok = self.tok_peek()
        self.pos = self.pos + 1
        return [astnode("'from'", tok)]

    def parsehelper_926(self, node):
        """ ## subexpr ##
        'test'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_test()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_924(self, node):
        """ ## subexpr ##
        GrammarNode('S', ["'from'", 'test'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_925(node) # 'from'
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        c = self.parsehelper_926(node) # test
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_928(self, node):
        """ ## subexpr ##
        'testlist'
        """
        oldpos = self.pos
        #

        # Non-terminal
        c = self.parse_testlist()
        if c is None:
            self.pos = oldpos
            return None
        return [c]

    def parsehelper_927(self, node):
        """ ## subexpr ##
        GrammarNode('S', ['testlist'])
        """
        oldpos = self.pos
        #

        # S-type
        childs = []

        c = self.parsehelper_928(node) # testlist
        if c is None:
            self.pos = oldpos
            return None
        childs.extend(c)

        return childs

    def parsehelper_923(self, node):
        """ ## subexpr ##
        GrammarNode('A', [GrammarNode('S', ["'from'", 'test']), GrammarNode('S', ['testlist'])])
        """
        oldpos = self.pos
        #

        # A-type (alt)
        if self.tok_peek_gstr().isdisjoint(TABLE[48]) and not ('EPS' in TABLE[48]):
            self.pos = oldpos
            return None

        c = self.parsehelper_924(node) # (1, 2, 1), GrammarNode('S', ["'from'", 'test']) FIRST: frozenset({"'from'"}) INTERSECTION: EMPTY
        if c is not None:
            return c

        c = self.parsehelper_927(node) # (1, 1, 0), GrammarNode('S', ['testlist']) FIRST: frozenset({"'True'", "'~'", 'NAME', "'not'", "'None'", "'-'", 'NUMBER', "'{'", "'False'", "'('", "'['", "'lambda'", "'...'", "'+'", 'STRING'}) INTERSECTION: EMPTY
        if c is not None:
            return c

        self.pos = oldpos
        return None

    def parse_yield_arg(self):
        """
        yield_arg: 'from' test | testlist
        
        ['yield_arg', ':', GrammarNode('A', [GrammarNode('S', ["'from'",
        'test']), GrammarNode('S', ['testlist'])])]
        """
        node = astnode('yield_arg')
        if self.tok_peek_gstr().isdisjoint(FIRST['yield_arg']):
            return None
        #
        startpos = self.pos
        c = self.parsehelper_923(node)
        if c is None:
            self.pos = startpos
            return None

        for x in c:
            node.addchild(x)
        return node
